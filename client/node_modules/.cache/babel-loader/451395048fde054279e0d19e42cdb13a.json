{"ast":null,"code":"module.exports = copy;\nvar slice = [].slice;\n\nfunction copy(source, target, target_start, source_start, source_end) {\n  target_start = arguments.length < 3 ? 0 : target_start;\n  source_start = arguments.length < 4 ? 0 : source_start;\n  source_end = arguments.length < 5 ? source.length : source_end;\n\n  if (source_end === source_start) {\n    return;\n  }\n\n  if (target.length === 0 || source.length === 0) {\n    return;\n  }\n\n  if (source_end > source.length) {\n    source_end = source.length;\n  }\n\n  if (target.length - target_start < source_end - source_start) {\n    source_end = target.length - target_start + start;\n  }\n\n  if (source.buffer !== target.buffer) {\n    return fast_copy(source, target, target_start, source_start, source_end);\n  }\n\n  return slow_copy(source, target, target_start, source_start, source_end);\n}\n\nfunction fast_copy(source, target, target_start, source_start, source_end) {\n  var len = source_end - source_start + target_start;\n\n  for (var i = target_start, j = source_start; i < len; ++i, ++j) {\n    target[i] = source[j];\n  }\n}\n\nfunction slow_copy(from, to, j, i, jend) {\n  // the buffers could overlap.\n  var iend = jend + i,\n      tmp = new Uint8Array(slice.call(from, i, iend)),\n      x = 0;\n\n  for (; i < iend; ++i, ++x) {\n    to[j++] = tmp[x];\n  }\n}","map":{"version":3,"sources":["/Users/marcusnorwood/Sites/music-site/dale-street-studio-music/client/node_modules/bops/typedarray/copy.js"],"names":["module","exports","copy","slice","source","target","target_start","source_start","source_end","arguments","length","start","buffer","fast_copy","slow_copy","len","i","j","from","to","jend","iend","tmp","Uint8Array","call","x"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,IAAjB;AAEA,IAAIC,KAAK,GAAG,GAAGA,KAAf;;AAEA,SAASD,IAAT,CAAcE,MAAd,EAAsBC,MAAtB,EAA8BC,YAA9B,EAA4CC,YAA5C,EAA0DC,UAA1D,EAAsE;AACpEF,EAAAA,YAAY,GAAGG,SAAS,CAACC,MAAV,GAAmB,CAAnB,GAAuB,CAAvB,GAA2BJ,YAA1C;AACAC,EAAAA,YAAY,GAAGE,SAAS,CAACC,MAAV,GAAmB,CAAnB,GAAuB,CAAvB,GAA2BH,YAA1C;AACAC,EAAAA,UAAU,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,GAAuBN,MAAM,CAACM,MAA9B,GAAuCF,UAApD;;AAEA,MAAGA,UAAU,KAAKD,YAAlB,EAAgC;AAC9B;AACD;;AAED,MAAGF,MAAM,CAACK,MAAP,KAAkB,CAAlB,IAAuBN,MAAM,CAACM,MAAP,KAAkB,CAA5C,EAA+C;AAC7C;AACD;;AAED,MAAGF,UAAU,GAAGJ,MAAM,CAACM,MAAvB,EAA+B;AAC7BF,IAAAA,UAAU,GAAGJ,MAAM,CAACM,MAApB;AACD;;AAED,MAAGL,MAAM,CAACK,MAAP,GAAgBJ,YAAhB,GAA+BE,UAAU,GAAGD,YAA/C,EAA6D;AAC3DC,IAAAA,UAAU,GAAGH,MAAM,CAACK,MAAP,GAAgBJ,YAAhB,GAA+BK,KAA5C;AACD;;AAED,MAAGP,MAAM,CAACQ,MAAP,KAAkBP,MAAM,CAACO,MAA5B,EAAoC;AAClC,WAAOC,SAAS,CAACT,MAAD,EAASC,MAAT,EAAiBC,YAAjB,EAA+BC,YAA/B,EAA6CC,UAA7C,CAAhB;AACD;;AACD,SAAOM,SAAS,CAACV,MAAD,EAASC,MAAT,EAAiBC,YAAjB,EAA+BC,YAA/B,EAA6CC,UAA7C,CAAhB;AACD;;AAED,SAASK,SAAT,CAAmBT,MAAnB,EAA2BC,MAA3B,EAAmCC,YAAnC,EAAiDC,YAAjD,EAA+DC,UAA/D,EAA2E;AACzE,MAAIO,GAAG,GAAIP,UAAU,GAAGD,YAAd,GAA8BD,YAAxC;;AAEA,OAAI,IAAIU,CAAC,GAAGV,YAAR,EAAsBW,CAAC,GAAGV,YAA9B,EACIS,CAAC,GAAGD,GADR,EAEI,EAAEC,CAAF,EACA,EAAEC,CAHN,EAGS;AACPZ,IAAAA,MAAM,CAACW,CAAD,CAAN,GAAYZ,MAAM,CAACa,CAAD,CAAlB;AACD;AACF;;AAED,SAASH,SAAT,CAAmBI,IAAnB,EAAyBC,EAAzB,EAA6BF,CAA7B,EAAgCD,CAAhC,EAAmCI,IAAnC,EAAyC;AACvC;AACA,MAAIC,IAAI,GAAGD,IAAI,GAAGJ,CAAlB;AAAA,MACIM,GAAG,GAAG,IAAIC,UAAJ,CAAepB,KAAK,CAACqB,IAAN,CAAWN,IAAX,EAAiBF,CAAjB,EAAoBK,IAApB,CAAf,CADV;AAAA,MAEII,CAAC,GAAG,CAFR;;AAIA,SAAMT,CAAC,GAAGK,IAAV,EAAgB,EAAEL,CAAF,EAAK,EAAES,CAAvB,EAA0B;AACxBN,IAAAA,EAAE,CAACF,CAAC,EAAF,CAAF,GAAUK,GAAG,CAACG,CAAD,CAAb;AACD;AACF","sourcesContent":["module.exports = copy\n\nvar slice = [].slice\n\nfunction copy(source, target, target_start, source_start, source_end) {\n  target_start = arguments.length < 3 ? 0 : target_start\n  source_start = arguments.length < 4 ? 0 : source_start\n  source_end = arguments.length < 5 ? source.length : source_end\n\n  if(source_end === source_start) {\n    return\n  }\n\n  if(target.length === 0 || source.length === 0) {\n    return\n  }\n\n  if(source_end > source.length) {\n    source_end = source.length\n  }\n\n  if(target.length - target_start < source_end - source_start) {\n    source_end = target.length - target_start + start\n  }\n\n  if(source.buffer !== target.buffer) {\n    return fast_copy(source, target, target_start, source_start, source_end)\n  }\n  return slow_copy(source, target, target_start, source_start, source_end)\n}\n\nfunction fast_copy(source, target, target_start, source_start, source_end) {\n  var len = (source_end - source_start) + target_start\n\n  for(var i = target_start, j = source_start;\n      i < len;\n      ++i,\n      ++j) {\n    target[i] = source[j]\n  }\n}\n\nfunction slow_copy(from, to, j, i, jend) {\n  // the buffers could overlap.\n  var iend = jend + i\n    , tmp = new Uint8Array(slice.call(from, i, iend))\n    , x = 0\n\n  for(; i < iend; ++i, ++x) {\n    to[j++] = tmp[x]\n  }\n}\n"]},"metadata":{},"sourceType":"script"}