{"ast":null,"code":"var semver = require('semver'),\n    runtimeVersion = semver.parse(process.version);\n/**\n * Get Runtime Name\n *\n * @api private\n */\n\n\nfunction getRuntimeName() {\n  var runtime = process.execPath.split(/[\\\\/]+/).pop().split('.').shift();\n  return runtime === 'node' || runtime === 'nodejs' ? 'node' : runtime;\n}\n/**\n * Get unique name of binary for current platform\n *\n * @api private\n */\n\n\nfunction getBinaryIdentifiableName() {\n  return [process.platform, '-', process.arch, '-', getRuntimeName(), '-', runtimeVersion.major, '.', runtimeVersion.minor].join('');\n}\n\nprocess.runtime = getRuntimeName();\nprocess.sassBinaryName = getBinaryIdentifiableName();","map":{"version":3,"sources":["/Users/marcusnorwood/Sites/music-site/dale-street-studio-music/client/node_modules/node-sass/lib/extensions.js"],"names":["semver","require","runtimeVersion","parse","process","version","getRuntimeName","runtime","execPath","split","pop","shift","getBinaryIdentifiableName","platform","arch","major","minor","join","sassBinaryName"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;AAAA,IACIC,cAAc,GAAGF,MAAM,CAACG,KAAP,CAAaC,OAAO,CAACC,OAArB,CADrB;AAGA;AACA;AACA;AACA;AACA;;;AAEA,SAASC,cAAT,GAA0B;AACxB,MAAIC,OAAO,GAAGH,OAAO,CAACI,QAAR,CACPC,KADO,CACD,QADC,EACSC,GADT,GAEPD,KAFO,CAED,GAFC,EAEIE,KAFJ,EAAd;AAIA,SAAOJ,OAAO,KAAK,MAAZ,IAAsBA,OAAO,KAAK,QAAlC,GAA6C,MAA7C,GAAsDA,OAA7D;AACD;AAED;AACA;AACA;AACA;AACA;;;AAEA,SAASK,yBAAT,GAAqC;AACnC,SAAO,CAACR,OAAO,CAACS,QAAT,EAAmB,GAAnB,EACCT,OAAO,CAACU,IADT,EACe,GADf,EAECR,cAAc,EAFf,EAEmB,GAFnB,EAGCJ,cAAc,CAACa,KAHhB,EAGuB,GAHvB,EAICb,cAAc,CAACc,KAJhB,EAIuBC,IAJvB,CAI4B,EAJ5B,CAAP;AAKD;;AAEDb,OAAO,CAACG,OAAR,GAAkBD,cAAc,EAAhC;AACAF,OAAO,CAACc,cAAR,GAAyBN,yBAAyB,EAAlD","sourcesContent":["var semver = require('semver'),\n    runtimeVersion = semver.parse(process.version);\n\n/**\n * Get Runtime Name\n *\n * @api private\n */\n\nfunction getRuntimeName() {\n  var runtime = process.execPath\n        .split(/[\\\\/]+/).pop()\n        .split('.').shift();\n\n  return runtime === 'node' || runtime === 'nodejs' ? 'node' : runtime;\n}\n\n/**\n * Get unique name of binary for current platform\n *\n * @api private\n */\n\nfunction getBinaryIdentifiableName() {\n  return [process.platform, '-',\n          process.arch, '-',\n          getRuntimeName(), '-',\n          runtimeVersion.major, '.',\n          runtimeVersion.minor].join('');\n}\n\nprocess.runtime = getRuntimeName();\nprocess.sassBinaryName = getBinaryIdentifiableName();\n"]},"metadata":{},"sourceType":"script"}