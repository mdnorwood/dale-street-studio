{"ast":null,"code":"\"use strict\";\n\nvar hasSyncZlib = true;\n\nvar zlib = require(\"zlib\");\n\nvar inflateSync = require(\"./sync-inflate\");\n\nif (!zlib.deflateSync) {\n  hasSyncZlib = false;\n}\n\nvar SyncReader = require(\"./sync-reader\");\n\nvar FilterSync = require(\"./filter-parse-sync\");\n\nvar Parser = require(\"./parser\");\n\nvar bitmapper = require(\"./bitmapper\");\n\nvar formatNormaliser = require(\"./format-normaliser\");\n\nmodule.exports = function (buffer, options) {\n  if (!hasSyncZlib) {\n    throw new Error(\"To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0\");\n  }\n\n  var err;\n\n  function handleError(_err_) {\n    err = _err_;\n  }\n\n  var metaData;\n\n  function handleMetaData(_metaData_) {\n    metaData = _metaData_;\n  }\n\n  function handleTransColor(transColor) {\n    metaData.transColor = transColor;\n  }\n\n  function handlePalette(palette) {\n    metaData.palette = palette;\n  }\n\n  function handleSimpleTransparency() {\n    metaData.alpha = true;\n  }\n\n  var gamma;\n\n  function handleGamma(_gamma_) {\n    gamma = _gamma_;\n  }\n\n  var inflateDataList = [];\n\n  function handleInflateData(inflatedData) {\n    inflateDataList.push(inflatedData);\n  }\n\n  var reader = new SyncReader(buffer);\n  var parser = new Parser(options, {\n    read: reader.read.bind(reader),\n    error: handleError,\n    metadata: handleMetaData,\n    gamma: handleGamma,\n    palette: handlePalette,\n    transColor: handleTransColor,\n    inflateData: handleInflateData,\n    simpleTransparency: handleSimpleTransparency\n  });\n  parser.start();\n  reader.process();\n\n  if (err) {\n    throw err;\n  } //join together the inflate datas\n\n\n  var inflateData = Buffer.concat(inflateDataList);\n  inflateDataList.length = 0;\n  var inflatedData;\n\n  if (metaData.interlace) {\n    inflatedData = zlib.inflateSync(inflateData);\n  } else {\n    var rowSize = (metaData.width * metaData.bpp * metaData.depth + 7 >> 3) + 1;\n    var imageSize = rowSize * metaData.height;\n    inflatedData = inflateSync(inflateData, {\n      chunkSize: imageSize,\n      maxLength: imageSize\n    });\n  }\n\n  inflateData = null;\n\n  if (!inflatedData || !inflatedData.length) {\n    throw new Error(\"bad png - invalid inflate data response\");\n  }\n\n  var unfilteredData = FilterSync.process(inflatedData, metaData);\n  inflateData = null;\n  var bitmapData = bitmapper.dataToBitMap(unfilteredData, metaData);\n  unfilteredData = null;\n  var normalisedBitmapData = formatNormaliser(bitmapData, metaData, options.skipRescale);\n  metaData.data = normalisedBitmapData;\n  metaData.gamma = gamma || 0;\n  return metaData;\n};","map":{"version":3,"sources":["/Users/marcusnorwood/Sites/music-site/dale-street-studio-music/client/node_modules/pngjs/lib/parser-sync.js"],"names":["hasSyncZlib","zlib","require","inflateSync","deflateSync","SyncReader","FilterSync","Parser","bitmapper","formatNormaliser","module","exports","buffer","options","Error","err","handleError","_err_","metaData","handleMetaData","_metaData_","handleTransColor","transColor","handlePalette","palette","handleSimpleTransparency","alpha","gamma","handleGamma","_gamma_","inflateDataList","handleInflateData","inflatedData","push","reader","parser","read","bind","error","metadata","inflateData","simpleTransparency","start","process","Buffer","concat","length","interlace","rowSize","width","bpp","depth","imageSize","height","chunkSize","maxLength","unfilteredData","bitmapData","dataToBitMap","normalisedBitmapData","skipRescale","data"],"mappings":"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","sourcesContent":["\"use strict\";\n\nlet hasSyncZlib = true;\nlet zlib = require(\"zlib\");\nlet inflateSync = require(\"./sync-inflate\");\nif (!zlib.deflateSync) {\n  hasSyncZlib = false;\n}\nlet SyncReader = require(\"./sync-reader\");\nlet FilterSync = require(\"./filter-parse-sync\");\nlet Parser = require(\"./parser\");\nlet bitmapper = require(\"./bitmapper\");\nlet formatNormaliser = require(\"./format-normaliser\");\n\nmodule.exports = function (buffer, options) {\n  if (!hasSyncZlib) {\n    throw new Error(\n      \"To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0\"\n    );\n  }\n\n  let err;\n  function handleError(_err_) {\n    err = _err_;\n  }\n\n  let metaData;\n  function handleMetaData(_metaData_) {\n    metaData = _metaData_;\n  }\n\n  function handleTransColor(transColor) {\n    metaData.transColor = transColor;\n  }\n\n  function handlePalette(palette) {\n    metaData.palette = palette;\n  }\n\n  function handleSimpleTransparency() {\n    metaData.alpha = true;\n  }\n\n  let gamma;\n  function handleGamma(_gamma_) {\n    gamma = _gamma_;\n  }\n\n  let inflateDataList = [];\n  function handleInflateData(inflatedData) {\n    inflateDataList.push(inflatedData);\n  }\n\n  let reader = new SyncReader(buffer);\n\n  let parser = new Parser(options, {\n    read: reader.read.bind(reader),\n    error: handleError,\n    metadata: handleMetaData,\n    gamma: handleGamma,\n    palette: handlePalette,\n    transColor: handleTransColor,\n    inflateData: handleInflateData,\n    simpleTransparency: handleSimpleTransparency,\n  });\n\n  parser.start();\n  reader.process();\n\n  if (err) {\n    throw err;\n  }\n\n  //join together the inflate datas\n  let inflateData = Buffer.concat(inflateDataList);\n  inflateDataList.length = 0;\n\n  let inflatedData;\n  if (metaData.interlace) {\n    inflatedData = zlib.inflateSync(inflateData);\n  } else {\n    let rowSize =\n      ((metaData.width * metaData.bpp * metaData.depth + 7) >> 3) + 1;\n    let imageSize = rowSize * metaData.height;\n    inflatedData = inflateSync(inflateData, {\n      chunkSize: imageSize,\n      maxLength: imageSize,\n    });\n  }\n  inflateData = null;\n\n  if (!inflatedData || !inflatedData.length) {\n    throw new Error(\"bad png - invalid inflate data response\");\n  }\n\n  let unfilteredData = FilterSync.process(inflatedData, metaData);\n  inflateData = null;\n\n  let bitmapData = bitmapper.dataToBitMap(unfilteredData, metaData);\n  unfilteredData = null;\n\n  let normalisedBitmapData = formatNormaliser(\n    bitmapData,\n    metaData,\n    options.skipRescale\n  );\n\n  metaData.data = normalisedBitmapData;\n  metaData.gamma = gamma || 0;\n\n  return metaData;\n};\n"]},"metadata":{},"sourceType":"script"}