{"ast":null,"code":"import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { firestore, convertPostsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchPostsSuccess, fetchPostsFailure } from './posts.actions';\nimport PostsActionTypes from './posts.types';\nexport function* fetchPostsAsync() {\n  try {\n    const postsRef = firestore.collection('posts');\n    const postsSnapshot = yield postsRef.get();\n    const postsMap = yield call(convertPostsSnapshotToMap, postsSnapshot);\n    yield put(fetchPostsSuccess(postsMap));\n  } catch (error) {\n    yield put(fetchPostsFailure(error.message));\n  }\n}\nexport function* fetchPostsStart() {\n  yield takeLatest(PostsActionTypes.FETCH_POSTS_START, fetchPostsAsync);\n}\nexport function* postsSagas() {\n  yield all([call(fetchPostsStart)]);\n}","map":{"version":3,"sources":["/Users/marcusnorwood/Sites/music-site/definition-music-and-mastering/client/src/redux/posts/posts.sagas.js"],"names":["takeLatest","call","put","all","firestore","convertPostsSnapshotToMap","fetchPostsSuccess","fetchPostsFailure","PostsActionTypes","fetchPostsAsync","postsRef","collection","postsSnapshot","get","postsMap","error","message","fetchPostsStart","FETCH_POSTS_START","postsSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AAEA,SAASC,SAAT,EAAoBC,yBAApB,QAAqD,+BAArD;AAEA,SAASC,iBAAT,EAA4BC,iBAA5B,QAAqD,iBAArD;AAEA,OAAOC,gBAAP,MAA6B,eAA7B;AAEA,OAAO,UAAUC,eAAV,GAA4B;AACjC,MAAI;AACF,UAAMC,QAAQ,GAAGN,SAAS,CAACO,UAAV,CAAqB,OAArB,CAAjB;AACA,UAAMC,aAAa,GAAG,MAAMF,QAAQ,CAACG,GAAT,EAA5B;AACA,UAAMC,QAAQ,GAAG,MAAMb,IAAI,CACzBI,yBADyB,EAEzBO,aAFyB,CAA3B;AAIE,UAAMV,GAAG,CAACI,iBAAiB,CAACQ,QAAD,CAAlB,CAAT;AACD,GARH,CAQI,OAAOC,KAAP,EAAc;AACd,UAAMb,GAAG,CAACK,iBAAiB,CAACQ,KAAK,CAACC,OAAP,CAAlB,CAAT;AACH;AACF;AAED,OAAO,UAAUC,eAAV,GAA4B;AAC/B,QAAMjB,UAAU,CACdQ,gBAAgB,CAACU,iBADH,EAEdT,eAFc,CAAhB;AAIH;AAED,OAAO,UAAUU,UAAV,GAAuB;AAC5B,QAAMhB,GAAG,CAAC,CAACF,IAAI,CAACgB,eAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["import { takeLatest, call, put, all } from 'redux-saga/effects';\n\nimport { firestore, convertPostsSnapshotToMap } from '../../firebase/firebase.utils';\n\nimport { fetchPostsSuccess, fetchPostsFailure } from './posts.actions';\n\nimport PostsActionTypes from './posts.types';\n\nexport function* fetchPostsAsync() {\n  try {\n    const postsRef = firestore.collection('posts');\n    const postsSnapshot = yield postsRef.get();\n    const postsMap = yield call(\n      convertPostsSnapshotToMap,\n      postsSnapshot\n    );\n      yield put(fetchPostsSuccess(postsMap));\n    } catch (error) {\n      yield put(fetchPostsFailure(error.message));\n  }\n}\n\nexport function* fetchPostsStart() {\n    yield takeLatest(\n      PostsActionTypes.FETCH_POSTS_START,\n      fetchPostsAsync\n    );\n}\n\nexport function* postsSagas() {\n  yield all([call(fetchPostsStart)]);\n}"]},"metadata":{},"sourceType":"module"}