{"ast":null,"code":"module.exports = from;\n\nvar base64 = require('base64-js');\n\nvar decoders = {\n  hex: from_hex,\n  utf8: from_utf,\n  base64: from_base64\n};\n\nfunction from(source, encoding) {\n  if (Array.isArray(source)) {\n    return new Uint8Array(source);\n  }\n\n  return decoders[encoding || 'utf8'](source);\n}\n\nfunction from_hex(str) {\n  var size = str.length / 2,\n      buf = new Uint8Array(size),\n      character = '';\n\n  for (var i = 0, len = str.length; i < len; ++i) {\n    character += str.charAt(i);\n\n    if (i > 0 && i % 2 === 1) {\n      buf[i >>> 1] = parseInt(character, 16);\n      character = '';\n    }\n  }\n\n  return buf;\n}\n\nfunction from_utf(str) {\n  var bytes = [],\n      tmp,\n      ch;\n\n  for (var i = 0, len = str.length; i < len; ++i) {\n    ch = str.charCodeAt(i);\n\n    if (ch & 0x80) {\n      tmp = encodeURIComponent(str.charAt(i)).substr(1).split('%');\n\n      for (var j = 0, jlen = tmp.length; j < jlen; ++j) {\n        bytes[bytes.length] = parseInt(tmp[j], 16);\n      }\n    } else {\n      bytes[bytes.length] = ch;\n    }\n  }\n\n  return new Uint8Array(bytes);\n}\n\nfunction from_base64(str) {\n  return new Uint8Array(base64.toByteArray(str));\n}","map":{"version":3,"sources":["/Users/marcusnorwood/Sites/music-site/dale-street-studio-music/client/node_modules/bops/typedarray/from.js"],"names":["module","exports","from","base64","require","decoders","hex","from_hex","utf8","from_utf","from_base64","source","encoding","Array","isArray","Uint8Array","str","size","length","buf","character","i","len","charAt","parseInt","bytes","tmp","ch","charCodeAt","encodeURIComponent","substr","split","j","jlen","toByteArray"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,IAAjB;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,WAAD,CAApB;;AAEA,IAAIC,QAAQ,GAAG;AACXC,EAAAA,GAAG,EAAEC,QADM;AAEXC,EAAAA,IAAI,EAAEC,QAFK;AAGXN,EAAAA,MAAM,EAAEO;AAHG,CAAf;;AAMA,SAASR,IAAT,CAAcS,MAAd,EAAsBC,QAAtB,EAAgC;AAC9B,MAAGC,KAAK,CAACC,OAAN,CAAcH,MAAd,CAAH,EAA0B;AACxB,WAAO,IAAII,UAAJ,CAAeJ,MAAf,CAAP;AACD;;AAED,SAAON,QAAQ,CAACO,QAAQ,IAAI,MAAb,CAAR,CAA6BD,MAA7B,CAAP;AACD;;AAED,SAASJ,QAAT,CAAkBS,GAAlB,EAAuB;AACrB,MAAIC,IAAI,GAAGD,GAAG,CAACE,MAAJ,GAAa,CAAxB;AAAA,MACIC,GAAG,GAAG,IAAIJ,UAAJ,CAAeE,IAAf,CADV;AAAA,MAEIG,SAAS,GAAG,EAFhB;;AAIA,OAAI,IAAIC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGN,GAAG,CAACE,MAAzB,EAAiCG,CAAC,GAAGC,GAArC,EAA0C,EAAED,CAA5C,EAA+C;AAC7CD,IAAAA,SAAS,IAAIJ,GAAG,CAACO,MAAJ,CAAWF,CAAX,CAAb;;AAEA,QAAGA,CAAC,GAAG,CAAJ,IAAUA,CAAC,GAAG,CAAL,KAAY,CAAxB,EAA2B;AACzBF,MAAAA,GAAG,CAACE,CAAC,KAAG,CAAL,CAAH,GAAaG,QAAQ,CAACJ,SAAD,EAAY,EAAZ,CAArB;AACAA,MAAAA,SAAS,GAAG,EAAZ;AACD;AACF;;AAED,SAAOD,GAAP;AACD;;AAED,SAASV,QAAT,CAAkBO,GAAlB,EAAuB;AACrB,MAAIS,KAAK,GAAG,EAAZ;AAAA,MACIC,GADJ;AAAA,MAEIC,EAFJ;;AAIA,OAAI,IAAIN,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGN,GAAG,CAACE,MAAzB,EAAiCG,CAAC,GAAGC,GAArC,EAA0C,EAAED,CAA5C,EAA+C;AAC7CM,IAAAA,EAAE,GAAGX,GAAG,CAACY,UAAJ,CAAeP,CAAf,CAAL;;AACA,QAAGM,EAAE,GAAG,IAAR,EAAc;AACZD,MAAAA,GAAG,GAAGG,kBAAkB,CAACb,GAAG,CAACO,MAAJ,CAAWF,CAAX,CAAD,CAAlB,CAAkCS,MAAlC,CAAyC,CAAzC,EAA4CC,KAA5C,CAAkD,GAAlD,CAAN;;AACA,WAAI,IAAIC,CAAC,GAAG,CAAR,EAAWC,IAAI,GAAGP,GAAG,CAACR,MAA1B,EAAkCc,CAAC,GAAGC,IAAtC,EAA4C,EAAED,CAA9C,EAAiD;AAC/CP,QAAAA,KAAK,CAACA,KAAK,CAACP,MAAP,CAAL,GAAsBM,QAAQ,CAACE,GAAG,CAACM,CAAD,CAAJ,EAAS,EAAT,CAA9B;AACD;AACF,KALD,MAKO;AACLP,MAAAA,KAAK,CAACA,KAAK,CAACP,MAAP,CAAL,GAAsBS,EAAtB;AACD;AACF;;AAED,SAAO,IAAIZ,UAAJ,CAAeU,KAAf,CAAP;AACD;;AAED,SAASf,WAAT,CAAqBM,GAArB,EAA0B;AACxB,SAAO,IAAID,UAAJ,CAAeZ,MAAM,CAAC+B,WAAP,CAAmBlB,GAAnB,CAAf,CAAP;AACD","sourcesContent":["module.exports = from\n\nvar base64 = require('base64-js')\n\nvar decoders = {\n    hex: from_hex\n  , utf8: from_utf\n  , base64: from_base64\n}\n\nfunction from(source, encoding) {\n  if(Array.isArray(source)) {\n    return new Uint8Array(source)\n  }\n\n  return decoders[encoding || 'utf8'](source)\n}\n\nfunction from_hex(str) {\n  var size = str.length / 2\n    , buf = new Uint8Array(size)\n    , character = ''\n\n  for(var i = 0, len = str.length; i < len; ++i) {\n    character += str.charAt(i)\n\n    if(i > 0 && (i % 2) === 1) {\n      buf[i>>>1] = parseInt(character, 16)\n      character = '' \n    }\n  }\n\n  return buf \n}\n\nfunction from_utf(str) {\n  var bytes = []\n    , tmp\n    , ch\n\n  for(var i = 0, len = str.length; i < len; ++i) {\n    ch = str.charCodeAt(i)\n    if(ch & 0x80) {\n      tmp = encodeURIComponent(str.charAt(i)).substr(1).split('%')\n      for(var j = 0, jlen = tmp.length; j < jlen; ++j) {\n        bytes[bytes.length] = parseInt(tmp[j], 16)\n      }\n    } else {\n      bytes[bytes.length] = ch \n    }\n  }\n\n  return new Uint8Array(bytes)\n}\n\nfunction from_base64(str) {\n  return new Uint8Array(base64.toByteArray(str)) \n}\n"]},"metadata":{},"sourceType":"script"}