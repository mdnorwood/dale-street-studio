{"ast":null,"code":"var tokens = [['function', /([\\w\\-]+)\\((.+)\\)/], ['interpolated', /\\#\\{\\$([\\w\\-]+)\\}/], ['variable', /\\$([\\w\\-]+)/]],\n    TOOLS = require('./tools'); // TODO: must use another way to get Arguments\n\n\nfunction _makeArgs(value, sep) {\n  return value.split(sep);\n}\n\nfunction _getSparator(value) {\n  var res = value.match(/ *, */);\n  return res ? res[0] : ',';\n}\n\nfunction _isString(value) {\n  return /^[\"'].+[\"']$/.test(value);\n}\n\nfunction _strSplice(str, index, length, replace) {\n  var arr = str.split('');\n  arr.splice(index, length, replace);\n  return arr.join('');\n}\n/**\n * find\n * @param {String} name function or mixin's name\n * @param {String} value arguments for function or mixin\n * @param {Function} done\n * @param {Object} tools\n * @param {String} prefix\n */\n\n\nfunction find(name, value, done, tools, prefix) {\n  tools = tools || TOOLS;\n\n  var self = this,\n      foo = tools[name],\n      separator = _getSparator(value),\n      args = _makeArgs(value, separator),\n      length = args.length,\n      token,\n      captures;\n\n  function _makeArgFix(i) {\n    return function (arg) {\n      args[i] = arg;\n      if (! --length) return _argFinish();\n    };\n  }\n\n  function _argFinish() {\n    if (foo) {\n      foo.length > 1 ? foo.call(self, args, done) : done(foo.call(self, args));\n    } else {\n      done((prefix ? prefix : '') + name + '(' + args.join(separator) + ')');\n    }\n  } // value just a string\n  // nothing to do\n  // like foo('hello')\n\n\n  if (_isString(value)) {\n    return _argFinish(); // argument can be\n    // hello\n    // 1 - 2\n    // 1 - $n\n    // 1 - #{$n}\n  } else {\n    args.forEach(function (arg, j) {\n      var _finish = _makeArgFix(j);\n\n      for (var i = 0, l = tokens.length; i < l; i++) {\n        token = tokens[i]; // capture\n\n        if (captures = token[1].exec(arg)) {\n          // need find another time\n          if (token[0] == 'function') {\n            return find.call(self, captures[1], captures[2], _finish, foo ? undefined : self.functions); // just a variable\n          } else {\n            // TODO it could not deal with more than one variable\n            return _finish(_strSplice(arg, captures.index, captures[0].length, TOOLS.variable.call(self, captures[1])));\n          }\n        }\n      } // it may be a string\n\n\n      return _finish(arg);\n    });\n  }\n}\n\nmodule.exports = find;","map":{"version":3,"sources":["/Users/marcusnorwood/Sites/music-site/dale-street-studio-music/client/node_modules/compass-node/lib/find.js"],"names":["tokens","TOOLS","require","_makeArgs","value","sep","split","_getSparator","res","match","_isString","test","_strSplice","str","index","length","replace","arr","splice","join","find","name","done","tools","prefix","self","foo","separator","args","token","captures","_makeArgFix","i","arg","_argFinish","call","forEach","j","_finish","l","exec","undefined","functions","variable","module","exports"],"mappings":"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","sourcesContent":["var tokens = [\n  ['function', /([\\w\\-]+)\\((.+)\\)/],\n  ['interpolated', /\\#\\{\\$([\\w\\-]+)\\}/],\n  ['variable', /\\$([\\w\\-]+)/]\n], TOOLS = require('./tools');\n\n// TODO: must use another way to get Arguments\nfunction _makeArgs(value, sep) {\n  return value.split(sep);\n}\n\nfunction _getSparator(value) {\n  var res = value.match(/ *, */);\n  return res ? res[0] : ',';\n}\n\nfunction _isString(value) {\n  return /^[\"'].+[\"']$/.test(value);\n}\n\nfunction _strSplice(str, index, length, replace) {\n  var arr = str.split('');\n  arr.splice(index, length, replace);\n  return arr.join('');\n}\n\n/**\n * find\n * @param {String} name function or mixin's name\n * @param {String} value arguments for function or mixin\n * @param {Function} done\n * @param {Object} tools\n * @param {String} prefix\n */\n\nfunction find(name, value, done, tools, prefix) {\n  tools = tools || TOOLS;\n  var self = this\n    , foo = tools[name]\n    , separator = _getSparator(value)\n    , args = _makeArgs(value, separator)\n    , length = args.length\n    , token, captures;\n\n  function _makeArgFix(i) {\n    return function (arg) {\n      args[i] = arg;\n      if (!(--length)) \n        return _argFinish();\n    }\n  }\n\n  function _argFinish() {\n    if (foo) {\n      foo.length > 1 ?\n        foo.call(self, args, done) :\n          done(foo.call(self, args));\n    } else {\n      done(\n        (prefix ? prefix : '') +\n        name + '(' + args.join(separator) + ')'\n      );\n    }\n  }\n\n  // value just a string\n  // nothing to do\n  // like foo('hello')\n  if (_isString(value)) {\n    return _argFinish();\n  // argument can be\n  // hello\n  // 1 - 2\n  // 1 - $n\n  // 1 - #{$n}\n  } else {\n    args.forEach(function (arg, j) {\n      var _finish = _makeArgFix(j);\n      for (var i = 0, l = tokens.length; i < l; i++) {\n        token = tokens[i];\n        // capture\n        if (captures = token[1].exec(arg)) {\n          // need find another time\n          if (token[0] == 'function') {\n            return find.call(self, captures[1], captures[2], _finish, foo ? undefined : self.functions);\n          // just a variable\n          } else { \n            // TODO it could not deal with more than one variable\n            return _finish(\n              _strSplice(\n                arg,\n                captures.index,\n                captures[0].length,\n                TOOLS.variable.call(self, captures[1])\n              )\n            );\n          }\n        }\n      }\n      // it may be a string\n      return _finish(arg);\n    });\n  }\n}\n\nmodule.exports = find;"]},"metadata":{},"sourceType":"script"}