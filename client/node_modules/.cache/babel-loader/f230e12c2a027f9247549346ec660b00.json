{"ast":null,"code":"// Load in packing.smith (from spritesmith) and create algorithm store\nvar PackingSmith = require('./smiths/packing.smith.js'),\n    assert = require('assert'),\n    algorithms = {};\n/**\n * Layout adds items in an algorithmic fashion\n * @constructor\n * @param {String|Object} [algorithm=\"top-down\"] Name of algorithm or custom algorithm to use\n * @param {Mixed} [options] Options to provide for the algorithm\n */\n\n\nfunction Layout(algorithmName, options) {\n  // Save the algorithmName as our algorithm (assume function)\n  var algorithm = algorithmName || 'top-down'; // If the algorithm is a string, look it up\n\n  if (typeof algorithm === 'string') {\n    algorithm = algorithms[algorithmName]; // Assert that the algorithm was found\n\n    assert(algorithm, 'Sorry, the \\'' + algorithmName + '\\' algorithm could not be loaded.');\n  } // Create a new PackingSmith with our algorithm and return\n\n\n  var retSmith = new PackingSmith(algorithm, options);\n  return retSmith;\n} // Expose PackingSmith on Layout\n\n\nLayout.PackingSmith = PackingSmith;\n/**\n * Method to add new algorithms via\n * @param {String} name Name of algorithm\n * @param {Object} algorithm Algorithm to bind under name\n * @param {Function} algorithm.sort Algorithm to sort object by\n * @param {Function} algorithm.placeItems Algorithm to place items by\n */\n\nfunction addAlgorithm(name, algorithm) {\n  // Save the algorithm to algorithms\n  algorithms[name] = algorithm;\n} // Make algorithms easier to add and expose them\n\n\nLayout.addAlgorithm = addAlgorithm;\nLayout.algorithms = algorithms; // Add default algorithms\n\naddAlgorithm('top-down', require('./algorithms/top-down.algorithm.js'));\naddAlgorithm('left-right', require('./algorithms/left-right.algorithm.js'));\naddAlgorithm('diagonal', require('./algorithms/diagonal.algorithm.js'));\naddAlgorithm('alt-diagonal', require('./algorithms/alt-diagonal.algorithm.js'));\naddAlgorithm('binary-tree', require('./algorithms/binary-tree.algorithm.js')); // /**\n//  * Method to add reverse algorithms via\n//  * @param {String} reverseName Name of reverse algorithm\n//  * @param {String} origName Name of original algorithm to reverse\n//  */\n// function addReverseAlgorithm(reverseName, origName) {\n//   // Take the original algorithm\n//   var algo = algorithms[origName];\n//   // Asser there is an algorithm\n//   assert(algo, 'Algorithm ' + origName + ' could not be found.');\n//   // Wrap the algorithm in a reverser\n//   function retFn(items) {\n//     items = algo(items);\n//     items.reverse();\n//     return items;\n//   }\n//   // Add the algorithm\n//   addAlgorithm(reverseName, retFn);\n// }\n// // // Add in reverse algorithms\n// // addReverseAlgorithm('bottom-up', 'top-down');\n// // addReverseAlgorithm('right-left', 'left-right');\n// // addReverseAlgorithm('reverse-diagonal', 'diagonal');\n// // Expose addReverseAlgorithm\n// Layout.addReverseAlgorithm = addReverseAlgorithm;\n// Expose Layout to the outside\n\nmodule.exports = Layout;","map":{"version":3,"sources":["/Users/marcusnorwood/Sites/music-site/dale-street-studio-music/client/node_modules/layout/lib/layout.js"],"names":["PackingSmith","require","assert","algorithms","Layout","algorithmName","options","algorithm","retSmith","addAlgorithm","name","module","exports"],"mappings":"AAAA;AACA,IAAIA,YAAY,GAAGC,OAAO,CAAC,2BAAD,CAA1B;AAAA,IACIC,MAAM,GAAGD,OAAO,CAAC,QAAD,CADpB;AAAA,IAEIE,UAAU,GAAG,EAFjB;AAIA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,MAAT,CAAgBC,aAAhB,EAA+BC,OAA/B,EAAwC;AACtC;AACA,MAAIC,SAAS,GAAGF,aAAa,IAAI,UAAjC,CAFsC,CAItC;;AACA,MAAI,OAAOE,SAAP,KAAqB,QAAzB,EAAmC;AACjCA,IAAAA,SAAS,GAAGJ,UAAU,CAACE,aAAD,CAAtB,CADiC,CAGjC;;AACAH,IAAAA,MAAM,CAACK,SAAD,EAAY,kBAAkBF,aAAlB,GAAiC,mCAA7C,CAAN;AACD,GAVqC,CAYtC;;;AACA,MAAIG,QAAQ,GAAG,IAAIR,YAAJ,CAAiBO,SAAjB,EAA4BD,OAA5B,CAAf;AACA,SAAOE,QAAP;AACD,C,CAED;;;AACAJ,MAAM,CAACJ,YAAP,GAAsBA,YAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASS,YAAT,CAAsBC,IAAtB,EAA4BH,SAA5B,EAAuC;AACrC;AACAJ,EAAAA,UAAU,CAACO,IAAD,CAAV,GAAmBH,SAAnB;AACD,C,CACD;;;AACAH,MAAM,CAACK,YAAP,GAAsBA,YAAtB;AACAL,MAAM,CAACD,UAAP,GAAoBA,UAApB,C,CAEA;;AACAM,YAAY,CAAC,UAAD,EAAaR,OAAO,CAAC,oCAAD,CAApB,CAAZ;AACAQ,YAAY,CAAC,YAAD,EAAeR,OAAO,CAAC,sCAAD,CAAtB,CAAZ;AACAQ,YAAY,CAAC,UAAD,EAAaR,OAAO,CAAC,oCAAD,CAApB,CAAZ;AACAQ,YAAY,CAAC,cAAD,EAAiBR,OAAO,CAAC,wCAAD,CAAxB,CAAZ;AACAQ,YAAY,CAAC,aAAD,EAAgBR,OAAO,CAAC,uCAAD,CAAvB,CAAZ,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AACAU,MAAM,CAACC,OAAP,GAAiBR,MAAjB","sourcesContent":["// Load in packing.smith (from spritesmith) and create algorithm store\nvar PackingSmith = require('./smiths/packing.smith.js'),\n    assert = require('assert'),\n    algorithms = {};\n\n/**\n * Layout adds items in an algorithmic fashion\n * @constructor\n * @param {String|Object} [algorithm=\"top-down\"] Name of algorithm or custom algorithm to use\n * @param {Mixed} [options] Options to provide for the algorithm\n */\nfunction Layout(algorithmName, options) {\n  // Save the algorithmName as our algorithm (assume function)\n  var algorithm = algorithmName || 'top-down';\n\n  // If the algorithm is a string, look it up\n  if (typeof algorithm === 'string') {\n    algorithm = algorithms[algorithmName];\n\n    // Assert that the algorithm was found\n    assert(algorithm, 'Sorry, the \\'' + algorithmName +'\\' algorithm could not be loaded.');\n  }\n\n  // Create a new PackingSmith with our algorithm and return\n  var retSmith = new PackingSmith(algorithm, options);\n  return retSmith;\n}\n\n// Expose PackingSmith on Layout\nLayout.PackingSmith = PackingSmith;\n\n/**\n * Method to add new algorithms via\n * @param {String} name Name of algorithm\n * @param {Object} algorithm Algorithm to bind under name\n * @param {Function} algorithm.sort Algorithm to sort object by\n * @param {Function} algorithm.placeItems Algorithm to place items by\n */\nfunction addAlgorithm(name, algorithm) {\n  // Save the algorithm to algorithms\n  algorithms[name] = algorithm;\n}\n// Make algorithms easier to add and expose them\nLayout.addAlgorithm = addAlgorithm;\nLayout.algorithms = algorithms;\n\n// Add default algorithms\naddAlgorithm('top-down', require('./algorithms/top-down.algorithm.js'));\naddAlgorithm('left-right', require('./algorithms/left-right.algorithm.js'));\naddAlgorithm('diagonal', require('./algorithms/diagonal.algorithm.js'));\naddAlgorithm('alt-diagonal', require('./algorithms/alt-diagonal.algorithm.js'));\naddAlgorithm('binary-tree', require('./algorithms/binary-tree.algorithm.js'));\n\n// /**\n//  * Method to add reverse algorithms via\n//  * @param {String} reverseName Name of reverse algorithm\n//  * @param {String} origName Name of original algorithm to reverse\n//  */\n// function addReverseAlgorithm(reverseName, origName) {\n//   // Take the original algorithm\n//   var algo = algorithms[origName];\n\n//   // Asser there is an algorithm\n//   assert(algo, 'Algorithm ' + origName + ' could not be found.');\n\n//   // Wrap the algorithm in a reverser\n//   function retFn(items) {\n//     items = algo(items);\n//     items.reverse();\n//     return items;\n//   }\n\n//   // Add the algorithm\n//   addAlgorithm(reverseName, retFn);\n// }\n// // // Add in reverse algorithms\n// // addReverseAlgorithm('bottom-up', 'top-down');\n// // addReverseAlgorithm('right-left', 'left-right');\n// // addReverseAlgorithm('reverse-diagonal', 'diagonal');\n\n// // Expose addReverseAlgorithm\n// Layout.addReverseAlgorithm = addReverseAlgorithm;\n\n// Expose Layout to the outside\nmodule.exports = Layout;\n"]},"metadata":{},"sourceType":"script"}