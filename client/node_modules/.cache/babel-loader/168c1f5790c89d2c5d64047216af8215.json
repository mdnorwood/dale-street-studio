{"ast":null,"code":"/*\n * datauri - A simple Data URI scheme generator\n * https://github.com/heldr/datauri\n *\n * Copyright (c) 2014 Helder Santana\n * Licensed under the MIT license.\n * https://raw.github.com/heldr/datauri/master/MIT-LICENSE.txt\n */\n\"use strict\";\n\nvar path = require('path'),\n    fs = require('fs'),\n    mimer = require('mimer'),\n    uri = require('../template/uri'),\n    css = require('../template/css'),\n    existsSync = fs.existsSync,\n    exists = fs.exists;\n\nmodule.exports = {\n  format: function format(fileName, fileContent) {\n    fileContent = fileContent instanceof Buffer ? fileContent : new Buffer(fileContent);\n    this.fileName = fileName;\n    this.base64 = fileContent.toString('base64');\n    this.mimetype = mimer(fileName);\n    this.content = uri.call(this);\n    return this;\n  },\n  encode: function encode(fileName, handler) {\n    this.async(fileName, function (err) {\n      if (handler) {\n        if (err) {\n          return handler(err);\n        }\n\n        handler.call(this, null, this.content, this);\n        return;\n      }\n\n      if (err) {\n        this.emit('error', err);\n        return;\n      }\n\n      this.emit('encoded', this.content, this);\n    });\n  },\n  encodeSync: function encodeSync(fileName) {\n    if (!fileName || !fileName.trim || fileName.trim() === '') {\n      throw new Error('Insert a File path as string argument');\n    }\n\n    if (existsSync(fileName)) {\n      var fileContent = fs.readFileSync(fileName);\n      return this.format(fileName, fileContent).content;\n    } else {\n      throw new Error('The file ' + fileName + ' was not found!');\n    }\n  },\n  async: function async(fileName, handler) {\n    var self = this;\n    exists(fileName, function () {\n      fs.readFile(fileName, function (err, fileContent) {\n        if (err) {\n          return handler.call(self, err);\n        }\n\n        handler.call(self.format(fileName, fileContent));\n      });\n    });\n  },\n  getCss: function getCss(className) {\n    if (!this.content) {\n      throw new Error('Create a data-uri config using the method encodeSync');\n    }\n\n    className = className || path.basename(this.fileName, path.extname(this.fileName));\n    return css.call({\n      className: className,\n      background: this.content\n    });\n  }\n};","map":{"version":3,"sources":["/Users/marcusnorwood/Sites/music-site/dale-street-studio-music/client/node_modules/datauri/lib/datauri/api.js"],"names":["path","require","fs","mimer","uri","css","existsSync","exists","module","exports","format","fileName","fileContent","Buffer","base64","toString","mimetype","content","call","encode","handler","async","err","emit","encodeSync","trim","Error","readFileSync","self","readFile","getCss","className","basename","extname","background"],"mappings":"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","sourcesContent":["/*\n * datauri - A simple Data URI scheme generator\n * https://github.com/heldr/datauri\n *\n * Copyright (c) 2014 Helder Santana\n * Licensed under the MIT license.\n * https://raw.github.com/heldr/datauri/master/MIT-LICENSE.txt\n */\n\n\"use strict\";\n\nvar path       = require('path'),\n    fs         = require('fs'),\n    mimer      = require('mimer'),\n    uri        = require('../template/uri'),\n    css        = require('../template/css'),\n    existsSync = fs.existsSync,\n    exists     = fs.exists;\n\nmodule.exports = {\n    format: function (fileName, fileContent) {\n        fileContent   = (fileContent instanceof Buffer) ? fileContent : new Buffer(fileContent);\n        this.fileName = fileName;\n        this.base64   = fileContent.toString('base64');\n        this.mimetype = mimer(fileName);\n        this.content  = uri.call(this);\n\n        return this;\n    },\n\n    encode: function (fileName, handler) {\n        this.async(fileName, function (err) {\n            if (handler) {\n                if (err) {\n                    return handler(err);\n                }\n\n                handler.call(this, null, this.content, this);\n\n                return;\n            }\n\n            if (err) {\n                this.emit('error', err);\n\n                return;\n            }\n\n            this.emit('encoded', this.content, this);\n        });\n    },\n\n    encodeSync: function (fileName) {\n        if (!fileName || !fileName.trim || fileName.trim() === '') {\n            throw new Error('Insert a File path as string argument');\n        }\n\n        if (existsSync(fileName)) {\n            var fileContent = fs.readFileSync(fileName);\n\n            return this.format(fileName, fileContent).content;\n        } else {\n            throw new Error('The file ' + fileName + ' was not found!');\n        }\n\n    },\n\n    async: function (fileName, handler) {\n        var self = this;\n\n        exists(fileName, function () {\n            fs.readFile(fileName, function (err, fileContent) {\n                if (err) {\n                    return handler.call(self, err);\n                }\n\n                handler.call(self.format(fileName, fileContent));\n            });\n        });\n    },\n\n    getCss: function (className) {\n\n        if (!this.content) {\n            throw new Error('Create a data-uri config using the method encodeSync');\n        }\n\n        className = className || path.basename(this.fileName, path.extname(this.fileName));\n\n        return css.call({\n            className: className,\n            background: this.content\n        });\n    }\n};\n"]},"metadata":{},"sourceType":"script"}