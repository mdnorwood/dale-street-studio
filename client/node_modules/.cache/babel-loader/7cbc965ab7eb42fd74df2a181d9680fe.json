{"ast":null,"code":"var fs = require('fs'),\n    async = require('async'),\n    assert = require('assert'),\n    utils = require('./utils'),\n    streamToString = utils.streamToString,\n    CanvasLib = require('canvas'),\n    ImageLib = CanvasLib.Image,\n    exporters = {},\n    engine = {};\n\nfunction Canvas(width, height) {\n  var canvas = new CanvasLib(width, height),\n      ctx = canvas.getContext('2d');\n  this.canvas = canvas;\n  this.ctx = ctx;\n}\n\nCanvas.prototype = {\n  'addImage': function addImage(img, x, y, cb) {\n    var ctx = this.ctx;\n    ctx.drawImage(img, x, y, img.width, img.height);\n  },\n\n  /**\n   * @param {Object} options Options for export\n   * @param {String} options.format Format to export as\n   * @param {Mixed} options.* Any other options the exporter might have\n   * @param {Function}\n   */\n  'export': function exportFn(options, cb) {\n    // Grab the exporter\n    var format = options.format || 'png',\n        exporter = exporters[format]; // Assert it exists\n\n    assert(exporter, 'Exporter ' + format + ' does not exist for spritesmith\\'s canvas engine'); // Render the item\n\n    exporter.call(this, options, cb);\n  }\n}; // Expose Canvas to engine\n\nengine.Canvas = Canvas;\n\nfunction createCanvas(width, height, cb) {\n  var canvas = new Canvas(width, height);\n  cb(null, canvas);\n} // Expose createCanvas to engine\n\n\nengine.createCanvas = createCanvas; // Write out Image as a static property of engine\n\nfunction createImage(file, cb) {\n  async.waterfall([function readImageFile(cb) {\n    // Read in the file as a buffer\n    fs.readFile(file, cb);\n  }, function createImageFn(imgBuffer, cb) {\n    // Create an image object with the proper source file\n    var img = new ImageLib();\n    img.src = imgBuffer; // Callback with the image\n\n    cb(null, img);\n  }], cb);\n}\n\nengine.createImage = createImage;\n\nfunction createImages(files, cb) {\n  async.map(files, createImage, cb);\n}\n\nengine.createImages = createImages; // Function to add new exporters\n\nfunction addExporter(name, exporter) {\n  exporters[name] = exporter;\n} // Expose the exporters\n\n\nengine.exporters = exporters;\nengine.addExporter = addExporter; // Add the png exporter\n\nfunction canvasPngExporter(options, cb) {\n  var canvas = this.canvas,\n      pngStream = canvas.createPNGStream(); // Stream out the png to a binary string and callback\n\n  streamToString(pngStream, cb);\n}\n\naddExporter('png', canvasPngExporter);\naddExporter('image/png', canvasPngExporter); // Add the jpg exporter\n\nfunction canvasJpegExporter(options, cb) {\n  var canvas = this.canvas,\n      jpegStream = canvas.createJPEGStream(); // Stream out the jpeg to a binary string and callback\n\n  streamToString(jpegStream, cb);\n}\n\naddExporter('jpg', canvasJpegExporter);\naddExporter('jpeg', canvasJpegExporter);\naddExporter('image/jpg', canvasJpegExporter);\naddExporter('image/jpeg', canvasJpegExporter); // Export the canvas\n\nmodule.exports = engine;","map":{"version":3,"sources":["/Users/marcusnorwood/Sites/music-site/dale-street-studio-music/client/node_modules/canvassmith/lib/canvassmith.js"],"names":["fs","require","async","assert","utils","streamToString","CanvasLib","ImageLib","Image","exporters","engine","Canvas","width","height","canvas","ctx","getContext","prototype","addImage","img","x","y","cb","drawImage","exportFn","options","format","exporter","call","createCanvas","createImage","file","waterfall","readImageFile","readFile","createImageFn","imgBuffer","src","createImages","files","map","addExporter","name","canvasPngExporter","pngStream","createPNGStream","canvasJpegExporter","jpegStream","createJPEGStream","module","exports"],"mappings":"AAAA,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;AAAA,IACIC,KAAK,GAAGD,OAAO,CAAC,OAAD,CADnB;AAAA,IAEIE,MAAM,GAAGF,OAAO,CAAC,QAAD,CAFpB;AAAA,IAGIG,KAAK,GAAGH,OAAO,CAAC,SAAD,CAHnB;AAAA,IAIII,cAAc,GAAGD,KAAK,CAACC,cAJ3B;AAAA,IAKIC,SAAS,GAAGL,OAAO,CAAC,QAAD,CALvB;AAAA,IAMIM,QAAQ,GAAGD,SAAS,CAACE,KANzB;AAAA,IAOIC,SAAS,GAAG,EAPhB;AAAA,IAQIC,MAAM,GAAG,EARb;;AAUA,SAASC,MAAT,CAAgBC,KAAhB,EAAuBC,MAAvB,EAA+B;AAC7B,MAAIC,MAAM,GAAG,IAAIR,SAAJ,CAAcM,KAAd,EAAqBC,MAArB,CAAb;AAAA,MACIE,GAAG,GAAGD,MAAM,CAACE,UAAP,CAAkB,IAAlB,CADV;AAEA,OAAKF,MAAL,GAAcA,MAAd;AACA,OAAKC,GAAL,GAAWA,GAAX;AACD;;AACDJ,MAAM,CAACM,SAAP,GAAmB;AACjB,cAAY,SAASC,QAAT,CAAmBC,GAAnB,EAAwBC,CAAxB,EAA2BC,CAA3B,EAA8BC,EAA9B,EAAkC;AAC5C,QAAIP,GAAG,GAAG,KAAKA,GAAf;AACAA,IAAAA,GAAG,CAACQ,SAAJ,CAAcJ,GAAd,EAAmBC,CAAnB,EAAsBC,CAAtB,EAAyBF,GAAG,CAACP,KAA7B,EAAoCO,GAAG,CAACN,MAAxC;AACD,GAJgB;;AAKjB;AACF;AACA;AACA;AACA;AACA;AACE,YAAU,SAASW,QAAT,CAAmBC,OAAnB,EAA4BH,EAA5B,EAAgC;AACxC;AACA,QAAII,MAAM,GAAGD,OAAO,CAACC,MAAR,IAAkB,KAA/B;AAAA,QACIC,QAAQ,GAAGlB,SAAS,CAACiB,MAAD,CADxB,CAFwC,CAKxC;;AACAvB,IAAAA,MAAM,CAACwB,QAAD,EAAW,cAAcD,MAAd,GAAuB,kDAAlC,CAAN,CANwC,CAQxC;;AACAC,IAAAA,QAAQ,CAACC,IAAT,CAAc,IAAd,EAAoBH,OAApB,EAA6BH,EAA7B;AACD;AArBgB,CAAnB,C,CAwBA;;AACAZ,MAAM,CAACC,MAAP,GAAgBA,MAAhB;;AAEA,SAASkB,YAAT,CAAsBjB,KAAtB,EAA6BC,MAA7B,EAAqCS,EAArC,EAAyC;AACvC,MAAIR,MAAM,GAAG,IAAIH,MAAJ,CAAWC,KAAX,EAAkBC,MAAlB,CAAb;AACAS,EAAAA,EAAE,CAAC,IAAD,EAAOR,MAAP,CAAF;AACD,C,CAED;;;AACAJ,MAAM,CAACmB,YAAP,GAAsBA,YAAtB,C,CAEA;;AACA,SAASC,WAAT,CAAqBC,IAArB,EAA2BT,EAA3B,EAA+B;AAC7BpB,EAAAA,KAAK,CAAC8B,SAAN,CAAgB,CACd,SAASC,aAAT,CAAwBX,EAAxB,EAA4B;AAC1B;AACAtB,IAAAA,EAAE,CAACkC,QAAH,CAAYH,IAAZ,EAAkBT,EAAlB;AACD,GAJa,EAKd,SAASa,aAAT,CAAwBC,SAAxB,EAAmCd,EAAnC,EAAuC;AACrC;AACA,QAAIH,GAAG,GAAG,IAAIZ,QAAJ,EAAV;AACAY,IAAAA,GAAG,CAACkB,GAAJ,GAAUD,SAAV,CAHqC,CAKrC;;AACAd,IAAAA,EAAE,CAAC,IAAD,EAAOH,GAAP,CAAF;AACD,GAZa,CAAhB,EAaGG,EAbH;AAcD;;AACDZ,MAAM,CAACoB,WAAP,GAAqBA,WAArB;;AAEA,SAASQ,YAAT,CAAsBC,KAAtB,EAA6BjB,EAA7B,EAAiC;AAC/BpB,EAAAA,KAAK,CAACsC,GAAN,CAAUD,KAAV,EAAiBT,WAAjB,EAA8BR,EAA9B;AACD;;AACDZ,MAAM,CAAC4B,YAAP,GAAsBA,YAAtB,C,CAEA;;AACA,SAASG,WAAT,CAAqBC,IAArB,EAA2Bf,QAA3B,EAAqC;AACnClB,EAAAA,SAAS,CAACiC,IAAD,CAAT,GAAkBf,QAAlB;AACD,C,CAED;;;AACAjB,MAAM,CAACD,SAAP,GAAmBA,SAAnB;AACAC,MAAM,CAAC+B,WAAP,GAAqBA,WAArB,C,CAEA;;AACA,SAASE,iBAAT,CAA2BlB,OAA3B,EAAoCH,EAApC,EAAwC;AACtC,MAAIR,MAAM,GAAG,KAAKA,MAAlB;AAAA,MACI8B,SAAS,GAAG9B,MAAM,CAAC+B,eAAP,EADhB,CADsC,CAItC;;AACAxC,EAAAA,cAAc,CAACuC,SAAD,EAAYtB,EAAZ,CAAd;AACD;;AACDmB,WAAW,CAAC,KAAD,EAAQE,iBAAR,CAAX;AACAF,WAAW,CAAC,WAAD,EAAcE,iBAAd,CAAX,C,CAEA;;AACA,SAASG,kBAAT,CAA4BrB,OAA5B,EAAqCH,EAArC,EAAyC;AACvC,MAAIR,MAAM,GAAG,KAAKA,MAAlB;AAAA,MACIiC,UAAU,GAAGjC,MAAM,CAACkC,gBAAP,EADjB,CADuC,CAIvC;;AACA3C,EAAAA,cAAc,CAAC0C,UAAD,EAAazB,EAAb,CAAd;AACD;;AACDmB,WAAW,CAAC,KAAD,EAAQK,kBAAR,CAAX;AACAL,WAAW,CAAC,MAAD,EAASK,kBAAT,CAAX;AACAL,WAAW,CAAC,WAAD,EAAcK,kBAAd,CAAX;AACAL,WAAW,CAAC,YAAD,EAAeK,kBAAf,CAAX,C,CAEA;;AACAG,MAAM,CAACC,OAAP,GAAiBxC,MAAjB","sourcesContent":["var fs = require('fs'),\n    async = require('async'),\n    assert = require('assert'),\n    utils = require('./utils'),\n    streamToString = utils.streamToString,\n    CanvasLib = require('canvas'),\n    ImageLib = CanvasLib.Image,\n    exporters = {},\n    engine = {};\n\nfunction Canvas(width, height) {\n  var canvas = new CanvasLib(width, height),\n      ctx = canvas.getContext('2d');\n  this.canvas = canvas;\n  this.ctx = ctx;\n}\nCanvas.prototype = {\n  'addImage': function addImage (img, x, y, cb) {\n    var ctx = this.ctx;\n    ctx.drawImage(img, x, y, img.width, img.height);\n  },\n  /**\n   * @param {Object} options Options for export\n   * @param {String} options.format Format to export as\n   * @param {Mixed} options.* Any other options the exporter might have\n   * @param {Function}\n   */\n  'export': function exportFn (options, cb) {\n    // Grab the exporter\n    var format = options.format || 'png',\n        exporter = exporters[format];\n\n    // Assert it exists\n    assert(exporter, 'Exporter ' + format + ' does not exist for spritesmith\\'s canvas engine');\n\n    // Render the item\n    exporter.call(this, options, cb);\n  }\n};\n\n// Expose Canvas to engine\nengine.Canvas = Canvas;\n\nfunction createCanvas(width, height, cb) {\n  var canvas = new Canvas(width, height);\n  cb(null, canvas);\n}\n\n// Expose createCanvas to engine\nengine.createCanvas = createCanvas;\n\n// Write out Image as a static property of engine\nfunction createImage(file, cb) {\n  async.waterfall([\n    function readImageFile (cb) {\n      // Read in the file as a buffer\n      fs.readFile(file, cb);\n    },\n    function createImageFn (imgBuffer, cb) {\n      // Create an image object with the proper source file\n      var img = new ImageLib();\n      img.src = imgBuffer;\n\n      // Callback with the image\n      cb(null, img);\n    }\n  ], cb);\n}\nengine.createImage = createImage;\n\nfunction createImages(files, cb) {\n  async.map(files, createImage, cb);\n}\nengine.createImages = createImages;\n\n// Function to add new exporters\nfunction addExporter(name, exporter) {\n  exporters[name] = exporter;\n}\n\n// Expose the exporters\nengine.exporters = exporters;\nengine.addExporter = addExporter;\n\n// Add the png exporter\nfunction canvasPngExporter(options, cb) {\n  var canvas = this.canvas,\n      pngStream = canvas.createPNGStream();\n\n  // Stream out the png to a binary string and callback\n  streamToString(pngStream, cb);\n}\naddExporter('png', canvasPngExporter);\naddExporter('image/png', canvasPngExporter);\n\n// Add the jpg exporter\nfunction canvasJpegExporter(options, cb) {\n  var canvas = this.canvas,\n      jpegStream = canvas.createJPEGStream();\n\n  // Stream out the jpeg to a binary string and callback\n  streamToString(jpegStream, cb);\n}\naddExporter('jpg', canvasJpegExporter);\naddExporter('jpeg', canvasJpegExporter);\naddExporter('image/jpg', canvasJpegExporter);\naddExporter('image/jpeg', canvasJpegExporter);\n\n// Export the canvas\nmodule.exports = engine;"]},"metadata":{},"sourceType":"script"}