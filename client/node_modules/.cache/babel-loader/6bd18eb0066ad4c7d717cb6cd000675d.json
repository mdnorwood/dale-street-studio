{"ast":null,"code":"function PackingSmith(algorithm, options) {\n  // Define items and save algorithm for later\n  this.items = [];\n  this.algorithm = algorithm; // Fallback options and determine whether to sort or not\n\n  options = options || {};\n  var sort = options.sort !== undefined ? options.sort : true;\n  this.sort = sort;\n}\n\nPackingSmith.prototype = {\n  /**\n   * @param {Object} item Item to store -- this currently is mutated in-memory\n   * @param {Number} item.width Width of the item\n   * @param {Number} item.height Height of the item\n   * @param {Mixed} [item.meta] Any meta data you would like to store related to the item\n   */\n  'addItem': function (item) {\n    // Save the item for later\n    this.items.push(item);\n  },\n  // Method to normalize coordinates to 0, 0\n  // This is bad to do mid-addition since it messes up the algorithm\n  'normalizeCoordinates': function () {\n    // Grab the items\n    var items = this.items; // Find the most negative x and y\n\n    var minX = Infinity,\n        minY = Infinity;\n    items.forEach(function (item) {\n      var coords = item;\n      minX = Math.min(minX, coords.x);\n      minY = Math.min(minY, coords.y);\n    }); // Offset each item by -minX, -minY; effectively resetting to 0, 0\n\n    items.forEach(function (item) {\n      var coords = item;\n      coords.x -= minX;\n      coords.y -= minY;\n    });\n  },\n  'getStats': function () {\n    // Get the endX and endY for each item\n    var items = this.items,\n        coordsArr = items.map(function (item) {\n      return item;\n    }),\n        minXArr = coordsArr.map(function (coords) {\n      return coords.x;\n    }),\n        minYArr = coordsArr.map(function (coords) {\n      return coords.y;\n    }),\n        maxXArr = coordsArr.map(function (coords) {\n      return coords.x + coords.width;\n    }),\n        maxYArr = coordsArr.map(function (coords) {\n      return coords.y + coords.height;\n    }); // Get the maximums of these\n\n    var retObj = {\n      'minX': Math.max.apply(Math, minXArr),\n      'minY': Math.max.apply(Math, minYArr),\n      'maxX': Math.max.apply(Math, maxXArr),\n      'maxY': Math.max.apply(Math, maxYArr)\n    }; // Return the stats\n\n    return retObj;\n  },\n  'getItems': function () {\n    return this.items;\n  },\n  'processItems': function () {\n    // Run the items through our algorithm\n    var items = this.items;\n\n    if (this.sort) {\n      items = this.algorithm.sort(items);\n    }\n\n    items = this.algorithm.placeItems(items); // Save the items for later\n\n    this.items = items; // Return the items\n\n    return items;\n  },\n  'exportItems': function () {\n    // Process the items\n    this.processItems(); // Normalize the coordinates to 0, 0\n\n    this.normalizeCoordinates(); // Return the packed items\n\n    return this.items;\n  },\n\n  /**\n   * @returns {Object} retObj\n   * @returns {Number} retObj.height Height of the processed layout\n   * @returns {Number} retObj.width Width of the processed layout\n   * @returns {Mixed[]} retObj.items Organized items\n   */\n  'export': function () {\n    // Grab the stats, coordinates, and items\n    var items = this.exportItems(),\n        stats = this.getStats(); // Generate and return our retObj\n\n    var retObj = {\n      'height': stats.maxY,\n      'width': stats.maxX,\n      'items': items\n    };\n    return retObj;\n  }\n}; // Export PackingSmith\n\nmodule.exports = PackingSmith;","map":{"version":3,"sources":["/Users/marcusnorwood/Sites/music-site/dale-street-studio-music/client/node_modules/layout/lib/smiths/packing.smith.js"],"names":["PackingSmith","algorithm","options","items","sort","undefined","prototype","item","push","minX","Infinity","minY","forEach","coords","Math","min","x","y","coordsArr","map","minXArr","minYArr","maxXArr","width","maxYArr","height","retObj","max","apply","placeItems","processItems","normalizeCoordinates","exportItems","stats","getStats","maxY","maxX","module","exports"],"mappings":"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","sourcesContent":["function PackingSmith(algorithm, options) {\n  // Define items and save algorithm for later\n  this.items = [];\n  this.algorithm = algorithm;\n\n  // Fallback options and determine whether to sort or not\n  options = options || {};\n  var sort = options.sort !== undefined ? options.sort : true;\n  this.sort = sort;\n}\nPackingSmith.prototype = {\n  /**\n   * @param {Object} item Item to store -- this currently is mutated in-memory\n   * @param {Number} item.width Width of the item\n   * @param {Number} item.height Height of the item\n   * @param {Mixed} [item.meta] Any meta data you would like to store related to the item\n   */\n  'addItem': function (item) {\n    // Save the item for later\n    this.items.push(item);\n  },\n  // Method to normalize coordinates to 0, 0\n  // This is bad to do mid-addition since it messes up the algorithm\n  'normalizeCoordinates': function () {\n    // Grab the items\n    var items = this.items;\n\n    // Find the most negative x and y\n    var minX = Infinity,\n        minY = Infinity;\n    items.forEach(function (item) {\n      var coords = item;\n      minX = Math.min(minX, coords.x);\n      minY = Math.min(minY, coords.y);\n    });\n\n    // Offset each item by -minX, -minY; effectively resetting to 0, 0\n    items.forEach(function (item) {\n      var coords = item;\n      coords.x -= minX;\n      coords.y -= minY;\n    });\n  },\n  'getStats': function () {\n    // Get the endX and endY for each item\n    var items = this.items,\n        coordsArr = items.map(function (item) {\n          return item;\n        }),\n        minXArr = coordsArr.map(function (coords) {\n          return coords.x;\n        }),\n        minYArr = coordsArr.map(function (coords) {\n          return coords.y;\n        }),\n        maxXArr = coordsArr.map(function (coords) {\n          return coords.x + coords.width;\n        }),\n        maxYArr = coordsArr.map(function (coords) {\n          return coords.y + coords.height;\n        });\n\n    // Get the maximums of these\n    var retObj = {\n          'minX': Math.max.apply(Math, minXArr),\n          'minY': Math.max.apply(Math, minYArr),\n          'maxX': Math.max.apply(Math, maxXArr),\n          'maxY': Math.max.apply(Math, maxYArr)\n        };\n\n    // Return the stats\n    return retObj;\n  },\n  'getItems': function () {\n    return this.items;\n  },\n  'processItems': function () {\n    // Run the items through our algorithm\n    var items = this.items;\n    if (this.sort) {\n      items = this.algorithm.sort(items);\n    }\n    items = this.algorithm.placeItems(items);\n\n    // Save the items for later\n    this.items = items;\n\n    // Return the items\n    return items;\n  },\n  'exportItems': function () {\n    // Process the items\n    this.processItems();\n\n    // Normalize the coordinates to 0, 0\n    this.normalizeCoordinates();\n\n    // Return the packed items\n    return this.items;\n  },\n  /**\n   * @returns {Object} retObj\n   * @returns {Number} retObj.height Height of the processed layout\n   * @returns {Number} retObj.width Width of the processed layout\n   * @returns {Mixed[]} retObj.items Organized items\n   */\n  'export': function () {\n    // Grab the stats, coordinates, and items\n    var items = this.exportItems(),\n        stats = this.getStats();\n\n    // Generate and return our retObj\n    var retObj = {\n          'height': stats.maxY,\n          'width': stats.maxX,\n          'items': items\n        };\n    return retObj;\n  }\n};\n\n// Export PackingSmith\nmodule.exports = PackingSmith;\n"]},"metadata":{},"sourceType":"script"}