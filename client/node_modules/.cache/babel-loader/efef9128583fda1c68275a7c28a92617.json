{"ast":null,"code":"'use strict';\n\nvar svgReg = /<svg[^>]+[^>]*>/;\n\nfunction isSVG(buffer) {\n  return svgReg.test(buffer);\n}\n\nvar extractorRegExps = {\n  'root': /<svg [^>]+>/,\n  'width': /(^|\\s)width\\s*=\\s*\"(.+?)\"/i,\n  'height': /(^|\\s)height\\s*=\\s*\"(.+?)\"/i,\n  'viewbox': /(^|\\s)viewbox\\s*=\\s*\"(.+?)\"/i\n};\n\nfunction getRatio(viewbox) {\n  var ratio = 1;\n\n  if (viewbox && viewbox[2]) {\n    var dim = viewbox[2].split(/\\s/g);\n\n    if (dim.length === 4) {\n      dim = dim.map(function (i) {\n        return parseInt(i, 10);\n      });\n      ratio = (dim[2] - dim[0]) / (dim[3] - dim[1]);\n    }\n  }\n\n  return ratio;\n}\n\nfunction parse(buffer) {\n  var body = buffer.toString().replace(/[\\r\\n\\s]+/g, ' ');\n  var section = body.match(extractorRegExps.root);\n  var root = section && section[0];\n\n  if (root) {\n    var width = root.match(extractorRegExps.width);\n    var height = root.match(extractorRegExps.height);\n    var viewbox = root.match(extractorRegExps.viewbox);\n    var ratio = getRatio(viewbox);\n    return {\n      'width': parseInt(width && width[2], 10) || 0,\n      'height': parseInt(height && height[2], 10) || 0,\n      'ratio': ratio\n    };\n  }\n}\n\nfunction calculate(buffer) {\n  var parsed = parse(buffer);\n  var width = parsed.width;\n  var height = parsed.height;\n  var ratio = parsed.ratio;\n\n  if (width && height) {\n    return {\n      'width': width,\n      'height': height\n    };\n  } else {\n    if (width) {\n      return {\n        'width': width,\n        'height': Math.floor(width / ratio)\n      };\n    } else if (height) {\n      return {\n        'width': Math.floor(height * ratio),\n        'height': height\n      };\n    } else {\n      throw new TypeError('invalid svg');\n    }\n  }\n}\n\nmodule.exports = {\n  'detect': isSVG,\n  'calculate': calculate\n};","map":{"version":3,"sources":["/Users/marcusnorwood/Sites/music-site/dale-street-studio-music/client/node_modules/image-size/lib/types/svg.js"],"names":["svgReg","isSVG","buffer","test","extractorRegExps","getRatio","viewbox","ratio","dim","split","length","map","i","parseInt","parse","body","toString","replace","section","match","root","width","height","calculate","parsed","Math","floor","TypeError","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar svgReg = /<svg[^>]+[^>]*>/;\nfunction isSVG (buffer) {\n  return svgReg.test(buffer);\n}\n\nvar extractorRegExps = {\n  'root': /<svg [^>]+>/,\n  'width': /(^|\\s)width\\s*=\\s*\"(.+?)\"/i,\n  'height': /(^|\\s)height\\s*=\\s*\"(.+?)\"/i,\n  'viewbox': /(^|\\s)viewbox\\s*=\\s*\"(.+?)\"/i\n};\n\nfunction getRatio (viewbox) {\n  var ratio = 1;\n  if (viewbox && viewbox[2]) {\n    var dim = viewbox[2].split(/\\s/g);\n    if (dim.length === 4) {\n      dim = dim.map(function (i) {\n        return parseInt(i, 10);\n      });\n      ratio = (dim[2] - dim[0]) / (dim[3] - dim[1]);\n    }\n  }\n  return ratio;\n}\n\nfunction parse (buffer) {\n  var body = buffer.toString().replace(/[\\r\\n\\s]+/g, ' ');\n  var section = body.match(extractorRegExps.root);\n  var root = section && section[0];\n  if (root) {\n    var width = root.match(extractorRegExps.width);\n    var height = root.match(extractorRegExps.height);\n    var viewbox = root.match(extractorRegExps.viewbox);\n    var ratio = getRatio(viewbox);\n    return {\n      'width': parseInt(width && width[2], 10) || 0,\n      'height': parseInt(height && height[2], 10) || 0,\n      'ratio': ratio\n    };\n  }\n}\n\nfunction calculate (buffer) {\n\n  var parsed = parse(buffer);\n  var width = parsed.width;\n  var height = parsed.height;\n  var ratio = parsed.ratio;\n\n  if (width && height) {\n    return { 'width': width, 'height': height };\n  } else {\n    if (width) {\n      return { 'width': width, 'height': Math.floor(width / ratio) };\n    } else if (height) {\n      return { 'width': Math.floor(height * ratio), 'height': height };\n    } else {\n      throw new TypeError('invalid svg');\n    }\n  }\n}\n\nmodule.exports = {\n  'detect': isSVG,\n  'calculate': calculate\n};\n"]},"metadata":{},"sourceType":"script"}