{"ast":null,"code":"'use strict';\n\nvar fs = require('fs'),\n    path = require('path'),\n    merge = require('./merge'),\n    eachAsync = require('each-series'),\n    _sprite = require('./sprite'),\n    functions = require('./functions'),\n    mixins = require('./mixins'),\n    tools = require('./tools'),\n    find = require('./find');\n\nvar tokens = [['comment', /^\\/\\/(.*)/], ['import', /^@import +('|\")([\\w\\-\\/\\\\\\.]+)\\1\\;/], ['sprite', /^@import +('|\")([\\w\\-\\/\\\\\\.\\*]+)\\1\\;/], ['mixin', /@include +([\\w\\-]+)\\((.*)\\)/], ['fun', /([\\w\\-]+)\\((.*)\\)/], ['variable', /^\\$([\\w\\-]+) *: +([^\\;]+)\\;/]];\n/**\n * _getFile\n * @private\n */\n\nfunction _getFile(includePaths, name) {\n  var p,\n      filePath,\n      names = name.split('/');\n  name = names.pop();\n\n  for (var i = 0, l = includePaths.length; i < l; i++) {\n    p = path.join(includePaths[i], names.join('/'));\n\n    if (fs.existsSync(filePath = _getScss(p, name)) || fs.existsSync(filePath = _getScss(p, '_' + name))) {\n      return filePath;\n    }\n  }\n}\n/**\n * _getScss\n * @private\n */\n\n\nfunction _getScss(p, name) {\n  if (name.indexOf('.scss') === name.length - 5) {\n    return path.join(p, name);\n  } else {\n    return path.join(p, name + '.scss');\n  }\n}\n\nfunction _getMatchLength(res) {\n  return res ? res.length : 0;\n}\n/**\n * Scss\n * @param {String} context\n * @param {Object} opts\n * @param {Object} [pOpts]\n */\n\n\nfunction Scss(context, opts, pOpts) {\n  pOpts = pOpts || {};\n  this.context = undefined;\n  this.callback = undefined;\n  this.opts = opts;\n  this.includePaths = opts.includePaths || [];\n  this.imagePath = opts.imagePath;\n  this.spriteDist = opts.spriteDist;\n  this.imports = pOpts.imports || {}; // merge the custom functions\n\n  this.variables = pOpts.variables || {};\n  merge(tools, opts.functions);\n  this.functions = merge(opts.functions || {}, functions);\n  this.clearLines = [];\n  this.deps = [];\n  this.dimensions = {};\n  this.isBlock = 0;\n  var self = this;\n  setImmediate(function () {\n    self.init(context);\n  });\n}\n\nScss.prototype = {\n  constructor: Scss,\n\n  /**\n   * init\n   * @param {String} context\n   */\n  init: function init(context) {\n    this.context = context.trim().split(/\\r?\\n/);\n    this.tokenize(this.context);\n  },\n\n  /**\n   * checkBlock\n   * @param {String}\n   */\n  checkBlock: function checkBlock(line) {\n    var openNum = _getMatchLength(line.match(/{/g)),\n        closeNum = _getMatchLength(line.match(/}/g));\n\n    this.isBlock = this.isBlock + openNum - closeNum;\n  },\n\n  /**\n   * tokenize\n   */\n  tokenize: function tokenize() {\n    var captures,\n        self = this;\n    eachAsync(this.context, function (str, n, done) {\n      str = str.trim();\n      self.checkBlock(str);\n\n      for (var i = 0, l = tokens.length; i < l; i++) {\n        if (captures = tokens[i][1].exec(str)) {\n          // need async\n          if (self[tokens[i][0]](captures, n, done)) {\n            return;\n          }\n\n          break;\n        }\n      }\n\n      done();\n    }, function () {\n      self.clearLines.forEach(function (line) {\n        self.context[line] = '';\n      });\n      self.context = self.deps.concat(self.context).join('\\n');\n      self.callback && self.callback(self.context);\n    });\n  },\n\n  /**\n   * import\n   * @param {Array} captures\n   * @param {String} n the line which match import\n   * @param {Function} done\n   */\n  import: function _import(captures, n, done) {\n    var file = _getFile(this.includePaths, captures[2]),\n        self = this;\n\n    if (file) {\n      // global import\n      if (!this.isBlock) {\n        if (!this.imports[file]) {\n          var opts = merge({}, this.opts),\n              includePaths = opts.includePaths.slice(0);\n          includePaths[0] = path.dirname(file);\n          merge(opts, {\n            includePaths: includePaths\n          });\n          new Scss(fs.readFileSync(file, {\n            encoding: 'utf8'\n          }), opts, {\n            imports: this.imports,\n            variables: this.variables\n          }).done(function (context) {\n            self.deps.push(context);\n            done();\n          });\n          this.imports[file] = true; // mark which line need clear\n\n          this.clearLines.push(n);\n          return true;\n        } else {\n          // mark which line need clear\n          this.clearLines.push(n);\n        } // nested import\n\n      } else {\n        // TODO need to implement local variable\n        var opts = merge({}, this.opts),\n            includePaths = opts.includePaths.slice(0);\n        includePaths[0] = path.dirname(file);\n        merge(opts, {\n          includePaths: includePaths\n        });\n        new Scss(fs.readFileSync(file, {\n          encoding: 'utf8'\n        }), opts, {\n          imports: this.imports,\n          variables: this.variables\n        }).done(function (context) {\n          self.context[n] = context;\n          done();\n        });\n        return true;\n      }\n    } else {\n      // fix position\n      self.deps.push(captures.input);\n      this.clearLines.push(n);\n    }\n  },\n\n  /**\n   * sprite\n   * @param {Array} captures\n   * @param {String} n the line which match sprite\n   * @param {Function} done\n   */\n  sprite: function sprite(captures, n, done) {\n    var self = this;\n\n    _sprite({\n      imagePath: this.imagePath,\n      images: captures[2],\n      dist: this.spriteDist\n    }, function (name, poses) {\n      var nameIndex = name.length - 2,\n          dim = '$' + name[nameIndex] + '-sprite-dimensions',\n          prefix = ['@mixin ' + name[nameIndex] + '-sprite($name) {', dim + ' : false !default;'],\n          file,\n          fileName,\n          fileNames = [];\n\n      for (file in poses) {\n        fileName = path.basename(file, '.png');\n        fileNames.push(fileName);\n        prefix.push(['    @if $name == ' + fileName + '{ ', \"        background: url('\" + name.join('-') + '.png' + \"') no-repeat \" + (poses[file].x ? '-' + poses[file].x + 'px' : poses[file].x) + \" \" + (poses[file].y ? '-' + poses[file].y + 'px' : poses[file].y) + \";\", '        @if ' + dim + ' == true {', '            width: ' + poses[file].width + 'px;', '            height: ' + poses[file].height + 'px;', '        }', '    }'].join('\\n'));\n      }\n\n      prefix.push('}');\n      prefix.push('@mixin all-' + name[nameIndex] + '-sprites {');\n      fileNames.forEach(function (fileName) {\n        prefix.push(['    .' + name[nameIndex] + '-' + fileName + ' {', '        @include ' + name[nameIndex] + '-sprite(' + fileName + ');', '    }'].join('\\n'));\n      });\n      prefix.push('}');\n      self.deps.push(prefix.join('\\n'));\n      done();\n    });\n\n    this.clearLines.push(n);\n    return true;\n  },\n\n  /**\n   * comment\n   * it must be ignored\n   */\n  comment: function comment() {// Nothing to do\n  },\n\n  /**\n   * mixin\n   * @param {Array} captures\n   * @param {String} n the line which match mixin\n   * @param {Function} done\n   */\n  mixin: function mixin(captures, n, done) {\n    var self = this;\n    find.call(this, captures[1], captures[2], function (value) {\n      if (value !== false) {\n        self.context[n] = self.context[n].replace(captures[0], value);\n        done();\n      } else {\n        done();\n      }\n    }, mixins, '@include ');\n    return true;\n  },\n\n  /**\n   * fun\n   * @param {Array} captures\n   * @param {String} n the line which match function\n   * @param {Function} done\n   */\n  fun: function fun(captures, n, done) {\n    var self = this;\n    find.call(this, captures[1], captures[2], function (value) {\n      if (value !== false) {\n        self.context[n] = self.context[n].replace(captures[0], value);\n        done();\n      } else {\n        done();\n      }\n    }, this.functions);\n    return true;\n  },\n\n  /**\n   * variable\n   * @param {Array} captures\n   * @param {String} n the line which match variable\n   * @param {Function} done\n   */\n  variable: function variable(captures, n, done) {\n    // set variable\n    this.variables[captures[1]] = captures[2];\n  },\n\n  /**\n   * done\n   * @param {Function} cb\n   */\n  done: function done(cb) {\n    this.callback = cb;\n  }\n};\nmodule.exports = Scss;","map":{"version":3,"sources":["/Users/marcusnorwood/Sites/music-site/dale-street-studio-music/client/node_modules/compass-node/lib/scss.js"],"names":["fs","require","path","merge","eachAsync","sprite","functions","mixins","tools","find","tokens","_getFile","includePaths","name","p","filePath","names","split","pop","i","l","length","join","existsSync","_getScss","indexOf","_getMatchLength","res","Scss","context","opts","pOpts","undefined","callback","imagePath","spriteDist","imports","variables","clearLines","deps","dimensions","isBlock","self","setImmediate","init","prototype","constructor","trim","tokenize","checkBlock","line","openNum","match","closeNum","captures","str","n","done","exec","forEach","concat","import","file","slice","dirname","readFileSync","encoding","push","input","images","dist","poses","nameIndex","dim","prefix","fileName","fileNames","basename","x","y","width","height","comment","mixin","call","value","replace","fun","variable","cb","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar fs = require('fs')\n  , path = require('path')\n  , merge = require('./merge')\n  , eachAsync = require('each-series')\n  , sprite = require('./sprite')\n  , functions = require('./functions')\n  , mixins = require('./mixins')\n  , tools = require('./tools')\n  , find = require('./find');\n\nvar tokens = [\n  ['comment', /^\\/\\/(.*)/],\n  ['import', (/^@import +('|\")([\\w\\-\\/\\\\\\.]+)\\1\\;/)],\n  ['sprite', (/^@import +('|\")([\\w\\-\\/\\\\\\.\\*]+)\\1\\;/)],\n  ['mixin', /@include +([\\w\\-]+)\\((.*)\\)/],\n  ['fun', /([\\w\\-]+)\\((.*)\\)/],\n  ['variable', /^\\$([\\w\\-]+) *: +([^\\;]+)\\;/]\n];\n\n/**\n * _getFile\n * @private\n */\nfunction _getFile(includePaths, name) {\n  var p, filePath, names = name.split('/');\n  name = names.pop();\n  for (var i = 0, l = includePaths.length; i < l; i++) {\n    p = path.join(includePaths[i], names.join('/'));\n    if (\n      fs.existsSync(filePath = _getScss(p, name)) || \n        fs.existsSync(filePath = _getScss(p, '_' + name))\n      ) {\n      return filePath;\n    }\n  }\n}\n\n/**\n * _getScss\n * @private\n */\nfunction _getScss(p, name) {\n  if (name.indexOf('.scss') === name.length - 5) {\n    return path.join(p, name);\n  } else {\n    return path.join(p, name + '.scss');\n  }\n}\n\nfunction _getMatchLength(res) {\n  return res ? res.length : 0;\n}\n\n/**\n * Scss\n * @param {String} context\n * @param {Object} opts\n * @param {Object} [pOpts]\n */\nfunction Scss(context, opts, pOpts) {\n  pOpts = pOpts || {};\n  this.context = undefined;\n  this.callback = undefined;\n  this.opts = opts;\n  this.includePaths = opts.includePaths || [];\n  this.imagePath = opts.imagePath;\n  this.spriteDist = opts.spriteDist;\n  this.imports = pOpts.imports || {};\n  // merge the custom functions\n  this.variables = pOpts.variables || {};\n  merge(tools, opts.functions);\n  this.functions = merge(opts.functions || {}, functions);\n  this.clearLines = [];\n  this.deps = [];\n  this.dimensions = {};\n  this.isBlock = 0;\n  var self = this;\n  setImmediate(function () {\n    self.init(context);\n  });\n}\nScss.prototype = {\n  constructor: Scss,\n  /**\n   * init\n   * @param {String} context\n   */\n  init: function (context) {\n    this.context = context.trim().split(/\\r?\\n/);\n    this.tokenize(this.context);\n  },\n  /**\n   * checkBlock\n   * @param {String}\n   */\n  checkBlock: function (line) {\n    var openNum = _getMatchLength(line.match(/{/g))\n      , closeNum = _getMatchLength(line.match(/}/g));\n    this.isBlock = this.isBlock + openNum - closeNum;\n  },\n  /**\n   * tokenize\n   */\n  tokenize: function () {\n    var captures, self = this;\n    eachAsync(\n      this.context,\n      function (str, n, done) {\n        str = str.trim();\n        self.checkBlock(str);\n        for (var i = 0, l = tokens.length; i < l; i++) {\n          if (captures = tokens[i][1].exec(str)) {\n            // need async\n            if (self[tokens[i][0]](captures, n, done)) {\n              return;\n            }\n            break;\n          }\n        }\n        done();\n      },\n      function () {\n        self.clearLines.forEach(function (line) {\n          self.context[line] = '';\n        });\n        self.context = self.deps.concat(self.context).join('\\n');\n        self.callback && self.callback(self.context);\n      }\n    )\n  },\n  /**\n   * import\n   * @param {Array} captures\n   * @param {String} n the line which match import\n   * @param {Function} done\n   */\n  import: function (captures, n, done) {\n    var file = _getFile(this.includePaths, captures[2])\n      , self = this;\n    if (file) {\n      // global import\n      if (!this.isBlock) {\n        if (!this.imports[file]) {\n          var opts = merge({}, this.opts)\n            , includePaths = opts.includePaths.slice(0);\n          includePaths[0] = path.dirname(file);\n          merge(opts, { includePaths: includePaths });\n          new Scss(\n            fs.readFileSync(file, { encoding: 'utf8' }),\n            opts,\n            { imports: this.imports, variables: this.variables }\n          ).done(function (context) {\n            self.deps.push(context);\n            done();\n          });\n          this.imports[file] = true;\n          // mark which line need clear\n          this.clearLines.push(n);\n          return true;\n        } else {\n          // mark which line need clear\n          this.clearLines.push(n);\n        }\n      // nested import\n      } else {\n        // TODO need to implement local variable\n        var opts = merge({}, this.opts)\n          , includePaths = opts.includePaths.slice(0);\n        includePaths[0] = path.dirname(file);\n        merge(opts, { includePaths: includePaths });\n        new Scss(\n          fs.readFileSync(file, { encoding: 'utf8' }),\n          opts,\n          { imports: this.imports, variables: this.variables }\n        ).done(function (context) {\n          self.context[n] = context;\n          done();\n        });\n        return true;\n      }\n    } else {\n      // fix position\n      self.deps.push(captures.input);\n      this.clearLines.push(n);\n    }\n  },\n  /**\n   * sprite\n   * @param {Array} captures\n   * @param {String} n the line which match sprite\n   * @param {Function} done\n   */\n  sprite: function (captures, n, done) {\n    var self = this;\n    sprite({\n      imagePath: this.imagePath,\n      images: captures[2],\n      dist: this.spriteDist\n    }, function (name, poses) {\n      var nameIndex = name.length - 2\n        , dim = '$' + name[nameIndex] + '-sprite-dimensions'\n        , prefix = [\n          '@mixin ' + name[nameIndex] + '-sprite($name) {',\n          dim + ' : false !default;'\n      ] , file, fileName, fileNames = [];\n      for (file in poses) {\n        fileName = path.basename(file, '.png');\n        fileNames.push(fileName);\n        prefix.push([\n          '    @if $name == ' + fileName + '{ ',\n          \"        background: url('\" + name.join('-') + '.png' + \"') no-repeat \" + (poses[file].x ? '-' + poses[file].x + 'px' : poses[file].x) + \" \" + (poses[file].y ? '-' + poses[file].y + 'px' : poses[file].y) + \";\",\n          '        @if ' + dim + ' == true {',\n          '            width: ' + poses[file].width + 'px;',\n          '            height: ' + poses[file].height + 'px;',\n          '        }',\n          '    }'\n        ].join('\\n'));\n      }\n      prefix.push('}');\n      prefix.push('@mixin all-' + name[nameIndex] + '-sprites {');\n      fileNames.forEach(function (fileName) {\n        prefix.push([\n          '    .' + name[nameIndex] + '-' + fileName + ' {',\n          '        @include ' + name[nameIndex] + '-sprite(' + fileName + ');',\n          '    }'\n        ].join('\\n'));\n      });\n      prefix.push('}');\n      self.deps.push(prefix.join('\\n'));\n      done();\n    });\n    this.clearLines.push(n);\n    return true;\n  },\n  /**\n   * comment\n   * it must be ignored\n   */\n  comment: function () {\n    // Nothing to do\n  },\n  /**\n   * mixin\n   * @param {Array} captures\n   * @param {String} n the line which match mixin\n   * @param {Function} done\n   */\n  mixin: function (captures, n, done) {\n    var self = this;\n    find.call(this, captures[1], captures[2], function (value) {\n      if (value !== false) {\n        self.context[n] = \n          self.context[n].replace(captures[0], value);\n        done();\n      } else {\n        done();\n      }\n    }, mixins, '@include ');\n    return true;\n  },\n  /**\n   * fun\n   * @param {Array} captures\n   * @param {String} n the line which match function\n   * @param {Function} done\n   */\n  fun: function (captures, n, done) {\n    var self = this;\n    find.call(this, captures[1], captures[2], function (value) {\n      if (value !== false) {\n        self.context[n] = \n          self.context[n].replace(captures[0], value);\n        done();\n      } else {\n        done();\n      }\n    }, this.functions);\n    return true;\n  },\n  /**\n   * variable\n   * @param {Array} captures\n   * @param {String} n the line which match variable\n   * @param {Function} done\n   */\n  variable: function (captures, n, done) {\n    // set variable\n    this.variables[captures[1]] = captures[2];\n  },\n  /**\n   * done\n   * @param {Function} cb\n   */\n  done: function (cb) {\n    this.callback = cb;\n  }\n};\n\nmodule.exports = Scss;"]},"metadata":{},"sourceType":"script"}