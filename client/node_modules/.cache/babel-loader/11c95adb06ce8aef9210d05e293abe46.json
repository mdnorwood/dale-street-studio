{"ast":null,"code":"/*\n * mimer\n * https://github.com/heldr/mimer\n *\n * Copyright (c) 2013 Helder Santana\n * Licensed under the MIT license.\n * https://raw.github.com/heldr/mimer/master/MIT-LICENSE.txt\n */\n(function (root, factory) {\n  'use strict';\n\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    // Browser globals (root is window)\n    root.Mimer = factory();\n  }\n})(this, function () {\n  'use strict';\n\n  var Mimer = function Mimer(extPath) {\n    if (!(this instanceof Mimer)) {\n      if (extPath) {\n        var mime = new Mimer();\n        return mime.get(extPath);\n      }\n\n      return new Mimer();\n    }\n  },\n      _extGetter = typeof process !== 'undefined' && process.platform === 'win32' ? require('./extensions/getter') : function (path) {\n    var last = null,\n        splitPathRe = /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\n\n    if (!path.match('.')) {\n      return path;\n    }\n\n    path = splitPathRe.exec(path).slice(1);\n    last = path[path.length - 1];\n    return last !== '' ? last : path[path.length - 2];\n  };\n\n  Mimer.prototype = {\n    set: function set(ext, type) {\n      if (!(ext instanceof Array)) {\n        if (ext.match('.')) {\n          ext = ext.replace('.', '');\n        }\n\n        this.list[ext] = type;\n        return this;\n      } else {\n        for (var i = 0; i < ext.length; i++) {\n          this.set(ext[i], type);\n        }\n      }\n    },\n    get: function get(path) {\n      var ext = null,\n          generic = 'application/octet-stream';\n\n      if (!path) {\n        return generic;\n      }\n\n      ext = _extGetter(path).split('.')[1];\n      return this.list[ext] || generic;\n    },\n    list: typeof process !== 'undefined' && process.cwd ? require('./data/parser')(__dirname + '/data/mime.types') : $_MIMER_DATA_LIST\n  };\n  return Mimer;\n});","map":{"version":3,"sources":["/Users/marcusnorwood/Sites/music-site/dale-street-studio-music/client/node_modules/mimer/lib/exec.js"],"names":["root","factory","define","amd","exports","module","Mimer","extPath","mime","get","_extGetter","process","platform","require","path","last","splitPathRe","match","exec","slice","length","prototype","set","ext","type","Array","replace","list","i","generic","split","cwd","__dirname","$_MIMER_DATA_LIST"],"mappings":"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","sourcesContent":["/*\n * mimer\n * https://github.com/heldr/mimer\n *\n * Copyright (c) 2013 Helder Santana\n * Licensed under the MIT license.\n * https://raw.github.com/heldr/mimer/master/MIT-LICENSE.txt\n */\n\n(function (root, factory) {\n    'use strict';\n\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define([], factory);\n    } else if (typeof exports === 'object') {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like environments that support module.exports,\n        // like Node.\n        module.exports = factory();\n    } else {\n        // Browser globals (root is window)\n        root.Mimer = factory();\n    }\n}(this, function () {\n    'use strict';\n\n    var Mimer = function (extPath) {\n        if (!(this instanceof Mimer)) {\n            if (extPath) {\n                var mime = new Mimer();\n                return mime.get(extPath);\n            }\n            return new Mimer();\n        }\n    },\n    _extGetter = (typeof process !== 'undefined' && process.platform === 'win32') ? require('./extensions/getter') : function (path) {\n        var last        = null,\n            splitPathRe = /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\n\n        if (!path.match('.')) {\n            return path;\n        }\n\n        path = splitPathRe.exec(path).slice(1);\n        last = path[path.length - 1];\n\n        return (last !== '') ? last : path[path.length - 2];\n    };\n\n    Mimer.prototype = {\n        set: function (ext, type) {\n            if (!(ext instanceof Array)) {\n                if (ext.match('.')) {\n                    ext = ext.replace('.', '');\n                }\n                this.list[ext] = type;\n                return this;\n            } else {\n                for (var i = 0; i < ext.length; i++) {\n                    this.set(ext[i], type);\n                }\n            }\n        },\n        get: function (path) {\n            var ext     = null,\n                generic = 'application/octet-stream';\n\n            if (!path) {\n                return generic;\n            }\n\n            ext = _extGetter(path).split('.')[1];\n\n            return this.list[ext] || generic;\n        },\n        list: (typeof process !== 'undefined' && process.cwd) ? require('./data/parser')(__dirname + '/data/mime.types') : $_MIMER_DATA_LIST\n    };\n\n    return Mimer;\n}));\n"]},"metadata":{},"sourceType":"script"}