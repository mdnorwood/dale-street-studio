{"ast":null,"code":"/*\n * datauri - A simple Data URI scheme generator\n * https://github.com/heldr/datauri\n *\n * Copyright (c) 2014 Helder Santana\n * Licensed under the MIT license.\n * https://raw.github.com/heldr/datauri/master/MIT-LICENSE.txt\n */\n\"use strict\";\n\nvar mixin = require('../helper').mixin,\n    RSVP = require('rsvp'),\n    Api = require('./api'),\n    EventEmitter = require('events').EventEmitter;\n\nfunction DataURI(fileName, handler) {\n  var datauri = null;\n  EventEmitter.call(this);\n\n  if (!(this instanceof DataURI)) {\n    datauri = new DataURI();\n\n    if (handler && typeof handler === 'function') {\n      datauri.encode(fileName, handler);\n      return;\n    }\n\n    return fileName ? datauri.encodeSync(fileName) : datauri;\n  }\n\n  if (fileName) {\n    return this.encodeSync(fileName);\n  }\n\n  return this;\n}\n\nfunction promises(fileName) {\n  var datauri = module.exports.prototype.constructor(),\n      promise = new RSVP.Promise(function (resolve, reject) {\n    datauri.on('encoded', resolve).on('error', reject).encode(fileName);\n  });\n  return promise;\n}\n\nObject.defineProperty(DataURI, 'promises', {\n  value: promises,\n  writable: false\n});\nmixin(DataURI.prototype, EventEmitter.prototype);\nmixin(DataURI.prototype, Api);\nmodule.exports = DataURI;","map":{"version":3,"sources":["/Users/marcusnorwood/Sites/music-site/dale-street-studio-music/client/node_modules/datauri/lib/datauri/module.js"],"names":["mixin","require","RSVP","Api","EventEmitter","DataURI","fileName","handler","datauri","call","encode","encodeSync","promises","module","exports","prototype","constructor","promise","Promise","resolve","reject","on","Object","defineProperty","value","writable"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,KAAK,GAAUC,OAAO,CAAC,WAAD,CAAP,CAAqBD,KAAxC;AAAA,IACIE,IAAI,GAAWD,OAAO,CAAC,MAAD,CAD1B;AAAA,IAEIE,GAAG,GAAYF,OAAO,CAAC,OAAD,CAF1B;AAAA,IAGIG,YAAY,GAAGH,OAAO,CAAC,QAAD,CAAP,CAAkBG,YAHrC;;AAKA,SAASC,OAAT,CAAiBC,QAAjB,EAA2BC,OAA3B,EAAoC;AAChC,MAAIC,OAAO,GAAG,IAAd;AAEAJ,EAAAA,YAAY,CAACK,IAAb,CAAkB,IAAlB;;AAEA,MAAI,EAAE,gBAAgBJ,OAAlB,CAAJ,EAAgC;AAC5BG,IAAAA,OAAO,GAAG,IAAIH,OAAJ,EAAV;;AAEA,QAAIE,OAAO,IAAI,OAAOA,OAAP,KAAmB,UAAlC,EAA8C;AAC1CC,MAAAA,OAAO,CAACE,MAAR,CAAeJ,QAAf,EAAyBC,OAAzB;AAEA;AACH;;AAED,WAAQD,QAAD,GAAaE,OAAO,CAACG,UAAR,CAAmBL,QAAnB,CAAb,GAA4CE,OAAnD;AACH;;AAED,MAAIF,QAAJ,EAAc;AACV,WAAO,KAAKK,UAAL,CAAgBL,QAAhB,CAAP;AACH;;AAED,SAAO,IAAP;AACH;;AAED,SAASM,QAAT,CAAkBN,QAAlB,EAA4B;AACxB,MAAIE,OAAO,GAAGK,MAAM,CAACC,OAAP,CAAeC,SAAf,CAAyBC,WAAzB,EAAd;AAAA,MACIC,OAAO,GAAG,IAAIf,IAAI,CAACgB,OAAT,CAAiB,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAClDZ,IAAAA,OAAO,CAACa,EAAR,CAAW,SAAX,EAAsBF,OAAtB,EACKE,EADL,CACQ,OADR,EACiBD,MADjB,EAEKV,MAFL,CAEYJ,QAFZ;AAGH,GAJS,CADd;AAOA,SAAOW,OAAP;AACH;;AAEDK,MAAM,CAACC,cAAP,CAAsBlB,OAAtB,EAA+B,UAA/B,EAA2C;AACvCmB,EAAAA,KAAK,EAAEZ,QADgC;AAEvCa,EAAAA,QAAQ,EAAE;AAF6B,CAA3C;AAKAzB,KAAK,CAACK,OAAO,CAACU,SAAT,EAAoBX,YAAY,CAACW,SAAjC,CAAL;AACAf,KAAK,CAACK,OAAO,CAACU,SAAT,EAAoBZ,GAApB,CAAL;AAEAU,MAAM,CAACC,OAAP,GAAiBT,OAAjB","sourcesContent":["/*\n * datauri - A simple Data URI scheme generator\n * https://github.com/heldr/datauri\n *\n * Copyright (c) 2014 Helder Santana\n * Licensed under the MIT license.\n * https://raw.github.com/heldr/datauri/master/MIT-LICENSE.txt\n */\n\n\"use strict\";\n\nvar mixin        = require('../helper').mixin,\n    RSVP         = require('rsvp'),\n    Api          = require('./api'),\n    EventEmitter = require('events').EventEmitter;\n\nfunction DataURI(fileName, handler) {\n    var datauri = null;\n\n    EventEmitter.call(this);\n\n    if (!(this instanceof DataURI)) {\n        datauri = new DataURI();\n\n        if (handler && typeof handler === 'function') {\n            datauri.encode(fileName, handler);\n\n            return;\n        }\n\n        return (fileName) ? datauri.encodeSync(fileName) : datauri;\n    }\n\n    if (fileName) {\n        return this.encodeSync(fileName);\n    }\n\n    return this;\n}\n\nfunction promises(fileName) {\n    var datauri = module.exports.prototype.constructor(),\n        promise = new RSVP.Promise(function (resolve, reject) {\n            datauri.on('encoded', resolve)\n                .on('error', reject)\n                .encode(fileName);\n        });\n\n    return promise;\n}\n\nObject.defineProperty(DataURI, 'promises', {\n    value: promises,\n    writable: false\n});\n\nmixin(DataURI.prototype, EventEmitter.prototype);\nmixin(DataURI.prototype, Api);\n\nmodule.exports = DataURI;\n"]},"metadata":{},"sourceType":"script"}