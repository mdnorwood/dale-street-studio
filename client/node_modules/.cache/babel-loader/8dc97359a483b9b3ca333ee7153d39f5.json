{"ast":null,"code":"var async = require('async'),\n    assert = require('assert'),\n    EngineSmith = require('./smiths/engine.smith.js'),\n    Layout = require('layout'),\n    CanvasSmith = require('./smiths/canvas.smith.js'),\n    engines = {};\n/**\n * Spritesmith generation function\n * @param {Object} params Parameters for spritesmith\n * @param {String[]} [params.src] Images to generate into sprite sheet\n * @param {String} [params.engine=\"auto\"] Engine to use (phantomjs, canvas, gm, pngsmith, or user-defined via Spritesmith.addEngine)\n * @param {String} [params.algorithm=\"top-down\"] Algorithm to pack images with (top-down or user-defined via Spritesmith.addAlgorithm)\n * @param {Number} [params.padding] Padding to use between images\n * @param {Mixed} [params.exportOpts] Options to pass through to engine for export\n * @param {Function} callback Function that receives compiled spritesheet and map\n * @returns {Mixed} callback[0] err If an error was encountered, this will be returned to callback\n * @returns {Object} callback[1] result Result object of spritesmith\n * @returns {String} callback[1].image Binary string representation of image\n * @returns {Object} callback[1].coordinates Map from file name to an object containing x, y, height, and width information about the source image\n */\n\n\nfunction Spritesmith(params, callback) {\n  var retObj = {},\n      files = params.src,\n      enginePref = params.engine || 'auto',\n      engine = engines[enginePref],\n      algorithmPref = params.algorithm || 'top-down'; // If the engine is not defined\n\n  if (engine === undefined) {\n    // If the engine was not auto, inform the user\n    assert.strictEqual(enginePref, 'auto', 'Sorry, the spritesmith engine \\'' + enginePref + '\\' could not be loaded. Please be sure you have installed it properly on your machine.'); // Begin attempting to load the engines (in order of hardest to easiest)\n\n    engine = engines.canvas || engines.gm || engines.phantomjs || engines.pngsmith; // Assert there is an engine\n\n    assert(engine, 'Sorry, no spritesmith engine could be loaded for your machine. Please be sure you have installed canvas or gm.');\n  } // If there is a set parameter for the engine, use it\n\n\n  if (engine.set) {\n    var engineOpts = params.engineOpts || {};\n    engine.set(engineOpts);\n  } // Create our smiths\n\n\n  var engineSmith = new EngineSmith(engine),\n      layer = new Layout(algorithmPref, params.algorithmOpts),\n      padding = params.padding || 0,\n      exportOpts = params.exportOpts || {},\n      packedObj; // In a waterfall fashion\n\n  async.waterfall([function grabImages(cb) {\n    // Map the files into their image counterparts\n    engineSmith.createImages(files, cb);\n  }, // Then, add the images to our canvas (dry run)\n  function smithAddFiles(images, cb) {\n    images.forEach(function (img) {\n      // Save the non-padded properties as meta data\n      var width = img.width,\n          height = img.height,\n          meta = {\n        'img': img,\n        'actualWidth': width,\n        'actualHeight': height\n      }; // Add the item with padding to our layer\n\n      layer.addItem({\n        'width': width + padding,\n        'height': height + padding,\n        'meta': meta\n      });\n    }); // Callback with nothing\n\n    cb(null);\n  }, // Then, output the coordinates\n  function smithOutputCoordinates(cb) {\n    // Export and saved packedObj for later\n    packedObj = layer['export'](); // Extract the coordinates\n\n    var coordinates = {},\n        packedItems = packedObj.items;\n    packedItems.forEach(function (item) {\n      var meta = item.meta,\n          img = meta.img,\n          name = img._filepath;\n      coordinates[name] = {\n        'x': item.x,\n        'y': item.y,\n        'width': meta.actualWidth,\n        'height': meta.actualHeight\n      };\n    }); // Save the coordinates\n\n    retObj.coordinates = coordinates; // Continue\n\n    cb(null);\n  }, // Then, generate a canvas\n  function generateCanvas(cb) {\n    // Grab and fallback the width/height\n    var width = Math.max(packedObj.width || 0, 0),\n        height = Math.max(packedObj.height || 0, 0); // If there are items\n\n    var itemsExist = packedObj.items.length;\n\n    if (itemsExist) {\n      // Remove the last item's padding\n      width -= padding;\n      height -= padding;\n    } // Export the total width and height of the generated canvas\n\n\n    retObj.properties = {\n      width: width,\n      height: height\n    }; // If there are items, generate the canvas\n\n    if (itemsExist) {\n      engine.createCanvas(width, height, cb);\n    } else {\n      // Otherwise, skip over potential errors/CPU\n      cb(null, '');\n    }\n  }, // Then, export the canvas\n  function exportCanvas(canvas, cb) {\n    // If there is no canvas, callback with an empty string\n    var items = packedObj.items;\n\n    if (!canvas) {\n      return cb(null, '');\n    } // Create a CanvasSmithy\n\n\n    var canvasSmith = new CanvasSmith(canvas); // Add the images onto canvasSmith\n\n    canvasSmith.addImages(items); // Export our canvas\n\n    canvasSmith['export'](exportOpts, cb);\n  }, function saveImageToRetObj(imgStr, cb) {\n    // Save the image to the retObj\n    retObj.image = imgStr; // Callback\n\n    cb(null);\n  }, function smithCallbackData(cb) {\n    // Callback with the return object\n    cb(null, retObj);\n  }], callback);\n} // Add the smiths to Spritesmith\n\n\nSpritesmith.EngineSmith = EngineSmith;\nSpritesmith.Layout = Layout;\nSpritesmith.CanvasSmith = CanvasSmith;\n/**\n * Method to add new engines via\n * @param {String} name Name of engine\n * @param {Function} engine Engine to bind under name\n */\n\nfunction addEngine(name, engine) {\n  engines[name] = engine;\n}\n\nSpritesmith.addEngine = addEngine;\nSpritesmith.engines = engines; // Attempt to load canvas and imagemagick\n\nvar canvasEngine, gmEngine, phantomjsEngine, pngEngine;\n\ntry {\n  canvasEngine = require('canvassmith');\n} catch (e) {}\n\ntry {\n  gmEngine = require('gmsmith');\n} catch (e) {}\n\ntry {\n  phantomjsEngine = require('phantomjssmith');\n} catch (e) {}\n\ntry {\n  pngEngine = require('pngsmith');\n} catch (e) {}\n\nif (canvasEngine) {\n  addEngine('canvas', canvasEngine);\n}\n\nif (gmEngine) {\n  addEngine('gm', gmEngine);\n}\n\nif (phantomjsEngine) {\n  addEngine('phantomjs', phantomjsEngine);\n}\n\nif (pngEngine) {\n  addEngine('pngsmith', pngEngine);\n} // Export Spritesmith\n\n\nmodule.exports = Spritesmith;","map":{"version":3,"sources":["/Users/marcusnorwood/Sites/music-site/dale-street-studio-music/client/node_modules/spritesmith/src/smith.js"],"names":["async","require","assert","EngineSmith","Layout","CanvasSmith","engines","Spritesmith","params","callback","retObj","files","src","enginePref","engine","algorithmPref","algorithm","undefined","strictEqual","canvas","gm","phantomjs","pngsmith","set","engineOpts","engineSmith","layer","algorithmOpts","padding","exportOpts","packedObj","waterfall","grabImages","cb","createImages","smithAddFiles","images","forEach","img","width","height","meta","addItem","smithOutputCoordinates","coordinates","packedItems","items","item","name","_filepath","x","y","actualWidth","actualHeight","generateCanvas","Math","max","itemsExist","length","properties","createCanvas","exportCanvas","canvasSmith","addImages","saveImageToRetObj","imgStr","image","smithCallbackData","addEngine","canvasEngine","gmEngine","phantomjsEngine","pngEngine","e","module","exports"],"mappings":"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","sourcesContent":["var async = require('async'),\n    assert = require('assert'),\n    EngineSmith = require('./smiths/engine.smith.js'),\n    Layout = require('layout'),\n    CanvasSmith = require('./smiths/canvas.smith.js'),\n    engines = {};\n\n\n/**\n * Spritesmith generation function\n * @param {Object} params Parameters for spritesmith\n * @param {String[]} [params.src] Images to generate into sprite sheet\n * @param {String} [params.engine=\"auto\"] Engine to use (phantomjs, canvas, gm, pngsmith, or user-defined via Spritesmith.addEngine)\n * @param {String} [params.algorithm=\"top-down\"] Algorithm to pack images with (top-down or user-defined via Spritesmith.addAlgorithm)\n * @param {Number} [params.padding] Padding to use between images\n * @param {Mixed} [params.exportOpts] Options to pass through to engine for export\n * @param {Function} callback Function that receives compiled spritesheet and map\n * @returns {Mixed} callback[0] err If an error was encountered, this will be returned to callback\n * @returns {Object} callback[1] result Result object of spritesmith\n * @returns {String} callback[1].image Binary string representation of image\n * @returns {Object} callback[1].coordinates Map from file name to an object containing x, y, height, and width information about the source image\n */\nfunction Spritesmith(params, callback) {\n  var retObj = {},\n      files = params.src,\n      enginePref = params.engine || 'auto',\n      engine = engines[enginePref],\n      algorithmPref = params.algorithm || 'top-down';\n\n  // If the engine is not defined\n  if (engine === undefined) {\n    // If the engine was not auto, inform the user\n    assert.strictEqual(enginePref, 'auto', 'Sorry, the spritesmith engine \\'' + enginePref + '\\' could not be loaded. Please be sure you have installed it properly on your machine.');\n\n    // Begin attempting to load the engines (in order of hardest to easiest)\n    engine = engines.canvas || engines.gm || engines.phantomjs || engines.pngsmith;\n\n    // Assert there is an engine\n    assert(engine, 'Sorry, no spritesmith engine could be loaded for your machine. Please be sure you have installed canvas or gm.');\n  }\n\n  // If there is a set parameter for the engine, use it\n  if (engine.set) {\n    var engineOpts = params.engineOpts || {};\n    engine.set(engineOpts);\n  }\n\n  // Create our smiths\n  var engineSmith = new EngineSmith(engine),\n      layer = new Layout(algorithmPref, params.algorithmOpts),\n      padding = params.padding || 0,\n      exportOpts = params.exportOpts || {},\n      packedObj;\n\n  // In a waterfall fashion\n  async.waterfall([\n    function grabImages (cb) {\n      // Map the files into their image counterparts\n      engineSmith.createImages(files, cb);\n    },\n    // Then, add the images to our canvas (dry run)\n    function smithAddFiles (images, cb) {\n      images.forEach(function (img) {\n        // Save the non-padded properties as meta data\n        var width = img.width,\n            height = img.height,\n            meta = {'img': img, 'actualWidth': width, 'actualHeight': height};\n\n        // Add the item with padding to our layer\n        layer.addItem({'width': width + padding, 'height': height + padding, 'meta': meta});\n      });\n\n      // Callback with nothing\n      cb(null);\n    },\n    // Then, output the coordinates\n    function smithOutputCoordinates (cb) {\n      // Export and saved packedObj for later\n      packedObj = layer['export']();\n\n      // Extract the coordinates\n      var coordinates = {},\n          packedItems = packedObj.items;\n      packedItems.forEach(function (item) {\n        var meta = item.meta,\n            img = meta.img,\n            name = img._filepath;\n        coordinates[name] = {\n          'x': item.x,\n          'y': item.y,\n          'width': meta.actualWidth,\n          'height': meta.actualHeight\n        };\n      });\n\n      // Save the coordinates\n      retObj.coordinates = coordinates;\n\n      // Continue\n      cb(null);\n    },\n    // Then, generate a canvas\n    function generateCanvas (cb) {\n      // Grab and fallback the width/height\n      var width = Math.max(packedObj.width || 0, 0),\n          height = Math.max(packedObj.height || 0, 0);\n\n      // If there are items\n      var itemsExist = packedObj.items.length;\n      if (itemsExist) {\n        // Remove the last item's padding\n        width -= padding;\n        height -= padding;\n      }\n\n      // Export the total width and height of the generated canvas\n      retObj.properties = {\n        width: width,\n        height: height\n      };\n\n      // If there are items, generate the canvas\n      if (itemsExist) {\n        engine.createCanvas(width, height, cb);\n      } else {\n      // Otherwise, skip over potential errors/CPU\n        cb(null, '');\n      }\n    },\n    // Then, export the canvas\n    function exportCanvas (canvas, cb) {\n      // If there is no canvas, callback with an empty string\n      var items = packedObj.items;\n      if (!canvas) {\n        return cb(null, '');\n      }\n\n      // Create a CanvasSmithy\n      var canvasSmith = new CanvasSmith(canvas);\n\n      // Add the images onto canvasSmith\n      canvasSmith.addImages(items);\n\n      // Export our canvas\n      canvasSmith['export'](exportOpts, cb);\n    },\n    function saveImageToRetObj(imgStr, cb) {\n      // Save the image to the retObj\n      retObj.image = imgStr;\n\n      // Callback\n      cb(null);\n    },\n    function smithCallbackData (cb) {\n      // Callback with the return object\n      cb(null, retObj);\n    }\n  ], callback);\n}\n\n// Add the smiths to Spritesmith\nSpritesmith.EngineSmith = EngineSmith;\nSpritesmith.Layout = Layout;\nSpritesmith.CanvasSmith = CanvasSmith;\n\n/**\n * Method to add new engines via\n * @param {String} name Name of engine\n * @param {Function} engine Engine to bind under name\n */\nfunction addEngine(name, engine) {\n  engines[name] = engine;\n}\nSpritesmith.addEngine = addEngine;\nSpritesmith.engines = engines;\n\n// Attempt to load canvas and imagemagick\nvar canvasEngine,\n    gmEngine,\n    phantomjsEngine,\n    pngEngine;\ntry {\n  canvasEngine = require('canvassmith');\n} catch (e) {}\n\ntry {\n  gmEngine = require('gmsmith');\n} catch (e) {}\n\ntry {\n  phantomjsEngine = require('phantomjssmith');\n} catch (e) {}\n\ntry {\n  pngEngine = require('pngsmith');\n} catch (e) {}\n\nif (canvasEngine) { addEngine('canvas', canvasEngine); }\nif (gmEngine) { addEngine('gm', gmEngine); }\nif (phantomjsEngine) { addEngine('phantomjs', phantomjsEngine); }\nif (pngEngine) { addEngine('pngsmith', pngEngine); }\n\n// Export Spritesmith\nmodule.exports = Spritesmith;\n"]},"metadata":{},"sourceType":"script"}