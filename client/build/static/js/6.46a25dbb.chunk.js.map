{"version":3,"sources":["components/stripe-button/stripe-button.component.jsx","components/checkout-item/checkout-item.component.jsx","pages/checkout/checkout.styles.jsx","pages/checkout/checkout.component.jsx"],"names":["StripeCheckoutButton","price","priceForStripe","label","name","billingAddress","shippingAddress","image","description","amount","panelLabel","token","axios","url","method","data","then","response","alert","catch","error","console","log","JSON","parse","stripeKey","connect","dispatch","clearItem","item","clearItemFromCart","addItem","removeItem","cartItem","imageUrl","quantity","className","src","alt","onClick","CheckoutPageContainer","styled","div","CheckoutHeaderContainer","HeaderBlockContainer","TotalContainer","WarningContainer","mapStateToProps","createStructuredSelector","cartItems","selectCartItems","total","selectCartTotal","map","id"],"mappings":"mQA2CeA,EAvCc,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACxBC,EAAyB,IAARD,EAsBvB,OACE,cAAC,IAAD,CACEE,MAAM,UACNC,KAAK,+BACLC,gBAAc,EACdC,iBAAe,EACfC,MAAM,+CACNC,YAAW,yBAAoBP,GAC/BQ,OAAQP,EACRQ,WAAW,UACXC,MA7BY,SAAAA,GACdC,IAAM,CACJC,IAAK,UACLC,OAAQ,OACRC,KAAM,CACJN,OAAQP,EACRS,WAEDK,MAAK,SAAAC,GACJC,MAAM,yBACLC,OAAM,SAAAC,GACLC,QAAQC,IAAI,kBAAmBC,KAAKC,MAAMJ,IAC1CF,MACE,+FAiBNO,UAhCmB,sC,QC0BVC,G,OAAAA,YACb,MAPyB,SAAAC,GAAQ,MAAK,CACtCC,UAAW,SAAAC,GAAI,OAAIF,EAASG,YAAkBD,KAC9CE,QAAS,SAAAF,GAAI,OAAIF,EAASI,YAAQF,KAClCG,WAAY,SAAAH,GAAI,OAAIF,EAASK,YAAWH,QAG3BH,EAxBM,SAAC,GAAmD,IAAjDO,EAAgD,EAAhDA,SAAUL,EAAsC,EAAtCA,UAAWG,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,WAC5C5B,EAAoC6B,EAApC7B,KAAM8B,EAA8BD,EAA9BC,SAAUjC,EAAoBgC,EAApBhC,MAAOkC,EAAaF,EAAbE,SAC/B,OACE,sBAAKC,UAAU,gBAAf,UACA,qBAAKA,UAAU,kBAAf,SACE,qBAAKC,IAAKH,EAAUI,IAAI,WAE1B,sBAAMF,UAAU,OAAhB,SAAwBhC,IACxB,uBAAMgC,UAAU,WAAhB,UACE,qBAAKA,UAAU,QAAQG,QAAS,kBAAMP,EAAWC,IAAjD,oBACE,sBAAMG,UAAU,QAAhB,SAAyBD,IAC3B,qBAAKC,UAAU,QAAQG,QAAS,kBAAMR,EAAQE,IAA9C,wBAEF,uBAAMG,UAAU,QAAhB,cAA0BnC,EAA1B,eACA,sBAAMmC,UAAU,gBAAgBG,QAAS,kBAAMX,EAAUK,IAAzD,2B,sBCpBSO,EAAwBC,IAAOC,IAAV,+ZAuBrBC,EAA0BF,IAAOC,IAAV,+KASvBE,EAAuBH,IAAOC,IAAV,mHASpBG,EAAiBJ,IAAOC,IAAV,2FAMdI,EAAmBL,IAAOC,IAAV,2GCGvBK,EAAkBC,YAAyB,CAC/CC,UAAWC,IACXC,MAAOC,MAGM1B,sBAAQqB,EAARrB,EArCM,SAAC,GAAD,IAAGuB,EAAH,EAAGA,UAAWE,EAAd,EAAcA,MAAd,OACnB,eAACX,EAAD,WACE,eAACG,EAAD,WACE,cAACC,EAAD,UACE,6CAEF,cAACA,EAAD,UACE,iDAEF,cAACA,EAAD,UACE,8CAEF,cAACA,EAAD,UACE,2CAEF,cAACA,EAAD,UACE,+CAGHK,EAAUI,KAAI,SAAApB,GAAQ,OACrB,cAAC,EAAD,CAAgCA,SAAUA,GAAvBA,EAASqB,OAE9B,eAACT,EAAD,sBAAyBM,KACzB,eAACL,EAAD,sEAEE,uBAFF,iDAKA,cAAC,EAAD,CAAsB7C,MAAOkD","file":"static/js/6.46a25dbb.chunk.js","sourcesContent":["import React from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\nimport axios from 'axios';\n\nconst StripeCheckoutButton = ({ price }) => {\n  const priceForStripe = price * 100;\n  const publishableKey = 'pk_test_PXFhSvADZpd2WKpqWHAZMzTN';\n\n  const onToken = token => {\n    axios({\n      url: 'payment',\n      method: 'post',\n      data: {\n        amount: priceForStripe,\n        token\n      }\n    }).then(response => {\n        alert('Payment successful')\n      }).catch(error => {\n          console.log('Payment error: ', JSON.parse(error));\n          alert(\n            'There was an issue with your payment. Please make sure you use the provided credit card'\n          );\n      });\n    };\n\n\n  return (\n    <StripeCheckout\n      label='Pay Now'\n      name='Definition Music & Mastering'\n      billingAddress\n      shippingAddress\n      image='https://i.ibb.co/sVsfxRc/Definition-Icon.png'\n      description={`Your total is $${price}`}\n      amount={priceForStripe}\n      panelLabel='Pay Now'\n      token={onToken}\n      stripeKey={publishableKey}\n    />\n  );\n};\n\nexport default StripeCheckoutButton;","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { clearItemFromCart, addItem, removeItem } from '../../redux/cart/cart.actions';\n\n\nimport './checkout-item.styles.scss';\n\nconst CheckoutItem = ({ cartItem, clearItem, addItem, removeItem } ) => {\n  const { name, imageUrl, price, quantity } = cartItem;\n  return (\n    <div className='checkout-item'>\n    <div className='image-container'>\n      <img src={imageUrl} alt='item' />\n    </div>\n    <span className='name'>{name}</span>\n    <span className='quantity'>\n      <div className='arrow' onClick={() => removeItem(cartItem)}>&#10094;</div>\n        <span className='value'>{quantity}</span>\n      <div className='arrow' onClick={() => addItem(cartItem)}> &#10095;</div>\n    </span>\n    <span className='price'>${price} per item</span>\n    <span className='remove-button' onClick={() => clearItem(cartItem)}>&#10005;</span>\n  </div>\n)};\n\nconst mapDispatchToProps = dispatch => ({\n  clearItem: item => dispatch(clearItemFromCart(item)),\n  addItem: item => dispatch(addItem(item)),\n  removeItem: item => dispatch(removeItem(item))\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps)(CheckoutItem);","import styled from 'styled-components';\n\nexport const CheckoutPageContainer = styled.div`\n  width: 55%;\n  min-height: 90vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 50px auto 0;\n\n  button {\n    margin-left: auto;\n    margin-top: 50px;\n  }\n\n  @media screen and (max-width: 800px) {\n    width: 90%;\n    min-height: 90vh;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin: 50px auto 0;\n    }\n`;\n\nexport const CheckoutHeaderContainer = styled.div`\n  width: 100%;\n  height: 40px;\n  display: flex;\n  justify-content: space-between;\n  border-bottom: 1px solid darkgrey;\n  text-align: center;\n`;\n\nexport const HeaderBlockContainer = styled.div`\n  text-transform: capitalize;\n  width: 23%;\n\n  &:last-child {\n    width: 8%;\n  }\n`;\n\nexport const TotalContainer = styled.div`\n  margin-top: 30px;\n  margin-left: auto;\n  font-size: 36px;\n`;\n\nexport const WarningContainer = styled.div`\n  text-align: center;\n  margin-top: 40px;\n  font-size: 24px;\n  color: red;\n`;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport StripeCheckoutButton from '../../components/stripe-button/stripe-button.component';\nimport CheckoutItem from '../../components/checkout-item/checkout-item.component';\n\nimport {\n  selectCartItems,\n  selectCartTotal\n} from '../../redux/cart/cart.selectors';\n\nimport {\n  CheckoutPageContainer,\n  CheckoutHeaderContainer,\n  HeaderBlockContainer,\n  TotalContainer,\n  WarningContainer\n} from './checkout.styles';\n\nconst CheckoutPage = ({ cartItems, total }) => (\n  <CheckoutPageContainer>\n    <CheckoutHeaderContainer>\n      <HeaderBlockContainer>\n        <span>Product</span>\n      </HeaderBlockContainer>\n      <HeaderBlockContainer>\n        <span>Description</span>\n      </HeaderBlockContainer>\n      <HeaderBlockContainer>\n        <span>Quantity</span>\n      </HeaderBlockContainer>\n      <HeaderBlockContainer>\n        <span>Price</span>\n      </HeaderBlockContainer>\n      <HeaderBlockContainer>\n        <span>Remove</span>\n      </HeaderBlockContainer>\n    </CheckoutHeaderContainer>\n    {cartItems.map(cartItem => (\n      <CheckoutItem key={cartItem.id} cartItem={cartItem} />\n    ))}\n    <TotalContainer>TOTAL: ${total}</TotalContainer>\n    <WarningContainer>\n      *Please use the following test credit card for payments*\n      <br />\n      4242 4242 4242 4242 - Exp: 01/20 - CVV: 123\n    </WarningContainer>\n    <StripeCheckoutButton price={total} />\n  </CheckoutPageContainer>\n);\n\nconst mapStateToProps = createStructuredSelector({\n  cartItems: selectCartItems,\n  total: selectCartTotal\n});\n\nexport default connect(mapStateToProps)(CheckoutPage);\n"],"sourceRoot":""}